[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Gennaro Calendo Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"what-are-summarizedexperiments","dir":"Articles","previous_headings":"","what":"What are SummarizedExperiments","title":"Practical analysis with SummarizedExperiments","text":"SummarizedExperiments R objects meant organizing manipulating rectangular matrices typically produced arrays high-throughput sequencing. kind analysis requires associating feature-level data (RNA-seq gene counts, methylation array loci, ATAC-seq regions, etc.) genomic coordinates features sample-level metadata features measured, using SummarizedExperiment organize, manipulate, store results. Please take moment read first 2 sections (least) SummarizedExperiment vignette order familiarize SummarizedExperiments structure. demonstrate can use SummarizedExperiments .","code":""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"subsetting-in-r","dir":"Articles","previous_headings":"","what":"Subsetting in R","title":"Practical analysis with SummarizedExperiments","text":"SummarizedExperiments allow quickly effectively subset data synchronized fashion keeps sample-level metadata, feature-level matrix data, genomic range-level data consistent. principles SummarizedExperiments derived base R subsetting operations. Therefore, order become comfortable SummarizedExperiments comfortable base R functions. may ever encountered R perspective tidyverse. tidyverse functions provide useful abstractions munging tidy data however, genomics data often best represented operated matrices. Keeping data matrix format can provide many benefits far speed code clarity, turn helps ensure correctness. can think matrices just fancy 2D versions vectors. vectors? Vectors main building blocks R analyses. Whenever use c() function, like: x <- c('', 'b', 'c') ’re creating vector. can kinds cool things vectors prove useful working SummarizedExperiments. NOTE: following heavily inspired Norm Matloff’s excellent fasteR tutorial. Take look get brief concise overview base R. also check first chapters Hadley Wickham’s amazing book Advanced R. first edition contains information base R.","code":""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"subsetting-vectors","dir":"Articles","previous_headings":"Subsetting in R","what":"Subsetting vectors","title":"Practical analysis with SummarizedExperiments","text":", ’ll use built-R constant called LETTERS. LETTERS vector simply ‘list’ uppercase letters Roman alphabet. can subset vector position. example, get 3rd letter use [ operator position want extract. can also use range positions. don’t select sequential elements either. can extract elements using another vector positions. Vectors become really powerful start combining logical operations. kind subsetting works vectors contain numeric data well. example, can filter measurements annual flow water Nile river like : Nile another built-dataset","code":"LETTERS #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" #> [20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" LETTERS[3] #> [1] \"C\" LETTERS[3:7] #> [1] \"C\" \"D\" \"E\" \"F\" \"G\" LETTERS[c(7, 5, 14, 14, 1, 18, 15)] #> [1] \"G\" \"E\" \"N\" \"N\" \"A\" \"R\" \"O\" my_favorite_letters <- c(\"A\", \"B\", \"C\")  # See that this produces a logical vector of (TRUE/FALSE) values # TRUE when LETTERS is one of my_favorite_letters and FALSE otherwise LETTERS %in% my_favorite_letters #>  [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [25] FALSE FALSE  # We can use that same expression to filter the vector LETTERS[LETTERS %in% my_favorite_letters] #> [1] \"A\" \"B\" \"C\" # Any values strictly greater than 1200 Nile[Nile > 1200] #> [1] 1210 1230 1370 1210 1250 1260 1220  # Any even number Nile[Nile %% 2 == 0] #>  [1] 1120 1160 1210 1160 1160 1230 1370 1140 1110  994 1020  960 1180  958 1140 #> [16] 1100 1210 1150 1250 1260 1220 1030 1100  774  840  874  694  940  916  692 #> [31] 1020 1050  726  456  824  702 1120 1100  832  764  768  864  862  698  744 #> [46]  796 1040  944  984  822 1010  676  846  812  742 1040  860  874  848  890 #> [61]  744  838 1050  918  986 1020  906 1170  912  746  718  714  740"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"subsetting-data-frames","dir":"Articles","previous_headings":"Subsetting in R","what":"Subsetting data.frames","title":"Practical analysis with SummarizedExperiments","text":"just one dimensional vectors. R usually deal data.frames (tibbles tidyers) matrices. Lucky us, subsetting operations learned vectors work way data.frames matrices. Let’s take look built-ToothGrowth dataset. data consists length odontoblasts 60 guinea pigs receiving one three levels vitamin C one two delivery methods. dollar sign $ used extract individual column data.frame, just vector. can also use [[ get thing. Double-brackets come handy columns valid R names since $ works columns valid names subsetting data.frame base R general scheme : order get 5th row first column : , can combine kind thinking extract rows columns matching logical conditions. example, want get animals administered orange juice (‘OJ’) can also combine logical statements. example, get rows animals administered orange juice odontoblast length (‘len’) less 10. gets annoying typing ToothGrowth every time want subset data.frame. Base R useful function called subset() can help us type less. subset() essentially ‘looks inside’ data.frame give given columns evaluates expression without explicitly tell R find columns. Think like dplyr::filter().","code":"head(ToothGrowth) #>    len supp dose #> 1  4.2   VC  0.5 #> 2 11.5   VC  0.5 #> 3  7.3   VC  0.5 #> 4  5.8   VC  0.5 #> 5  6.4   VC  0.5 #> 6 10.0   VC  0.5 head(ToothGrowth$len) #> [1]  4.2 11.5  7.3  5.8  6.4 10.0 head(ToothGrowth[[\"len\"]]) #> [1]  4.2 11.5  7.3  5.8  6.4 10.0 df[the rows you want, the columns you want] ToothGrowth[5, 1] #> [1] 6.4 ToothGrowth[ToothGrowth$supp == \"OJ\", ] #>     len supp dose #> 31 15.2   OJ  0.5 #> 32 21.5   OJ  0.5 #> 33 17.6   OJ  0.5 #> 34  9.7   OJ  0.5 #> 35 14.5   OJ  0.5 #> 36 10.0   OJ  0.5 #> 37  8.2   OJ  0.5 #> 38  9.4   OJ  0.5 #> 39 16.5   OJ  0.5 #> 40  9.7   OJ  0.5 #> 41 19.7   OJ  1.0 #> 42 23.3   OJ  1.0 #> 43 23.6   OJ  1.0 #> 44 26.4   OJ  1.0 #> 45 20.0   OJ  1.0 #> 46 25.2   OJ  1.0 #> 47 25.8   OJ  1.0 #> 48 21.2   OJ  1.0 #> 49 14.5   OJ  1.0 #> 50 27.3   OJ  1.0 #> 51 25.5   OJ  2.0 #> 52 26.4   OJ  2.0 #> 53 22.4   OJ  2.0 #> 54 24.5   OJ  2.0 #> 55 24.8   OJ  2.0 #> 56 30.9   OJ  2.0 #> 57 26.4   OJ  2.0 #> 58 27.3   OJ  2.0 #> 59 29.4   OJ  2.0 #> 60 23.0   OJ  2.0 ToothGrowth[ToothGrowth$supp == \"OJ\" & ToothGrowth$len < 10, ] #>    len supp dose #> 34 9.7   OJ  0.5 #> 37 8.2   OJ  0.5 #> 38 9.4   OJ  0.5 #> 40 9.7   OJ  0.5  # We can also use the bracket notation to select rows and columns at the same time ToothGrowth[ToothGrowth$supp == \"OJ\" & ToothGrowth$len < 10, c(\"len\", \"supp\")] #>    len supp #> 34 9.7   OJ #> 37 8.2   OJ #> 38 9.4   OJ #> 40 9.7   OJ subset(ToothGrowth, supp == \"OJ\" & len < 10) #>    len supp dose #> 34 9.7   OJ  0.5 #> 37 8.2   OJ  0.5 #> 38 9.4   OJ  0.5 #> 40 9.7   OJ  0.5"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"subsetting-matrices","dir":"Articles","previous_headings":"Subsetting in R","what":"Subsetting matrices","title":"Practical analysis with SummarizedExperiments","text":"Matrices behave much like data.frames unlike data.frames matrices can contain one type data. might sound like limitation first ’ll soon come realize matrices powerful (fast) work R. want extract value CpG.3 Sample3 values CpG.3 every sample CpGs Sample3 can also apply mask entire matrix . example, following mark value greater 0.5 TRUE can use kind masking filter rows matrix using helpful base R functions operate matrices. example, get CpGs 3 samples value > 0.5 can use rowSums() like : pattern common dealing sequencing data. Base R functions like rowSums() colMeans() specialized operate matrices efficient way summarize matrix data. R package matrixStats also contains highly optimized functions operating matrices. Compare tidy solution given matrix. ’s probably kind tidy solution using across() ’m missing tidy code wild seen looks Hopefully examples enough get started understanding subsetting works R appreciate useful . Now familiarity using R functions subsetting objects, ’re ready start working SummarizedExperiments.","code":"set.seed(123)  # Create some random data that looks like methylation values (m <- matrix(   data = runif(6 * 10),   ncol = 6,   dimnames = list(     paste0(\"CpG.\", 1:10),     paste0(\"Sample\", 1:6)   ) )) #>          Sample1    Sample2   Sample3    Sample4   Sample5    Sample6 #> CpG.1  0.2875775 0.95683335 0.8895393 0.96302423 0.1428000 0.04583117 #> CpG.2  0.7883051 0.45333416 0.6928034 0.90229905 0.4145463 0.44220007 #> CpG.3  0.4089769 0.67757064 0.6405068 0.69070528 0.4137243 0.79892485 #> CpG.4  0.8830174 0.57263340 0.9942698 0.79546742 0.3688455 0.12189926 #> CpG.5  0.9404673 0.10292468 0.6557058 0.02461368 0.1524447 0.56094798 #> CpG.6  0.0455565 0.89982497 0.7085305 0.47779597 0.1388061 0.20653139 #> CpG.7  0.5281055 0.24608773 0.5440660 0.75845954 0.2330341 0.12753165 #> CpG.8  0.8924190 0.04205953 0.5941420 0.21640794 0.4659625 0.75330786 #> CpG.9  0.5514350 0.32792072 0.2891597 0.31818101 0.2659726 0.89504536 #> CpG.10 0.4566147 0.95450365 0.1471136 0.23162579 0.8578277 0.37446278 m[3, 3] #> [1] 0.6405068 m[3, ] #>   Sample1   Sample2   Sample3   Sample4   Sample5   Sample6  #> 0.4089769 0.6775706 0.6405068 0.6907053 0.4137243 0.7989248  # Or refer to the row by it's name m[\"CpG.3\", ] #>   Sample1   Sample2   Sample3   Sample4   Sample5   Sample6  #> 0.4089769 0.6775706 0.6405068 0.6907053 0.4137243 0.7989248 m[, 3] #>     CpG.1     CpG.2     CpG.3     CpG.4     CpG.5     CpG.6     CpG.7     CpG.8  #> 0.8895393 0.6928034 0.6405068 0.9942698 0.6557058 0.7085305 0.5440660 0.5941420  #>     CpG.9    CpG.10  #> 0.2891597 0.1471136  # Or refer to the column by it's name m[, \"Sample3\"] #>     CpG.1     CpG.2     CpG.3     CpG.4     CpG.5     CpG.6     CpG.7     CpG.8  #> 0.8895393 0.6928034 0.6405068 0.9942698 0.6557058 0.7085305 0.5440660 0.5941420  #>     CpG.9    CpG.10  #> 0.2891597 0.1471136 m > 0.5 #>        Sample1 Sample2 Sample3 Sample4 Sample5 Sample6 #> CpG.1    FALSE    TRUE    TRUE    TRUE   FALSE   FALSE #> CpG.2     TRUE   FALSE    TRUE    TRUE   FALSE   FALSE #> CpG.3    FALSE    TRUE    TRUE    TRUE   FALSE    TRUE #> CpG.4     TRUE    TRUE    TRUE    TRUE   FALSE   FALSE #> CpG.5     TRUE   FALSE    TRUE   FALSE   FALSE    TRUE #> CpG.6    FALSE    TRUE    TRUE   FALSE   FALSE   FALSE #> CpG.7     TRUE   FALSE    TRUE    TRUE   FALSE   FALSE #> CpG.8     TRUE   FALSE    TRUE   FALSE   FALSE    TRUE #> CpG.9     TRUE   FALSE   FALSE   FALSE   FALSE    TRUE #> CpG.10   FALSE    TRUE   FALSE   FALSE    TRUE   FALSE m[rowSums(m > 0.5) > 3, ] #>         Sample1   Sample2   Sample3   Sample4   Sample5   Sample6 #> CpG.3 0.4089769 0.6775706 0.6405068 0.6907053 0.4137243 0.7989248 #> CpG.4 0.8830174 0.5726334 0.9942698 0.7954674 0.3688455 0.1218993 tidyr::as_tibble(m, rownames = \"CpG\") |>   tidyr::pivot_longer(!CpG, names_to = \"SampleName\", values_to = \"beta\") |>   dplyr::group_by(CpG) |>   dplyr::mutate(n = sum(beta > 0.5)) |>   dplyr::filter(n > 3) |>   tidyr::pivot_wider(id_cols = CpG, names_from = \"SampleName\", values_from = \"beta\") |>   tibble::column_to_rownames(var = \"CpG\") |>   data.matrix() #>         Sample1   Sample2   Sample3   Sample4   Sample5   Sample6 #> CpG.3 0.4089769 0.6775706 0.6405068 0.6907053 0.4137243 0.7989248 #> CpG.4 0.8830174 0.5726334 0.9942698 0.7954674 0.3688455 0.1218993"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"the-summarizedexperiment","dir":"Articles","previous_headings":"","what":"The SummarizedExperiment","title":"Practical analysis with SummarizedExperiments","text":"SummarizedExperiment vignette:  SummarizedExperiment object coordinates four main parts: matrix-like: implements dim(), dimnames(), 2-dimensional [, [<- methods. rows: genes, genomic coordinates, etc. columns: samples, cells, etc. E.g., description sample rowRanges(): coordinates gene / exons transcripts / etc. rowData(): P-values log-fold change gene differential expression analysis. metadata(): List unstructured metadata describing overall content object. order better understand work, let’s construct SummarizedExperiment scratch.","code":""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"constructing-a-summarizedexperiment","dir":"Articles","previous_headings":"The SummarizedExperiment","what":"Constructing a SummarizedExperiment","title":"Practical analysis with SummarizedExperiments","text":"Hopefully ’ll already working data SummarizedExperiment class derives one. just case don’t data structured SummarizedExperiment ’s useful instructive understand create one scratch. useful, SummarizedExperiment least: matrix data features rows samples columns metadata data.frame samples rownames columns describing properties Another really useful object add SummarizedExperiments GRanges object describing genomic locations feature matrix. Adding SummarizedExperiment creates called RangedSummarizedExperiment acts just like regular SummarizedExperiment extra features. construct basic SummarizedExperiment: ’ll create ‘counts’ matrix gene IDs rows Samples columns ’ll add metadata describing Samples ’ll add GRanges() describing genomic location genes","code":""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"construct-the-counts-matrix","dir":"Articles","previous_headings":"The SummarizedExperiment > Constructing a SummarizedExperiment","what":"Construct the counts matrix","title":"Practical analysis with SummarizedExperiments","text":"","code":"suppressPackageStartupMessages(library(SummarizedExperiment))   counts <- matrix(   data = rnbinom(n = 200 * 6, mu = 100, size = 1 / 0.5),   nrow = 200,   dimnames = list(paste0(\"Gene\", 1:200), paste0(\"Sample\", 1:6)) )  # Take a peek at what this looks like counts[1:5, 1:5] #>       Sample1 Sample2 Sample3 Sample4 Sample5 #> Gene1     100     210     186      14      95 #> Gene2      74      17      62      48      27 #> Gene3     129      72     105     203      73 #> Gene4      73      80      84      81      59 #> Gene5      17     242      32      21      58"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"construct-the-sample-metadata","dir":"Articles","previous_headings":"The SummarizedExperiment > Constructing a SummarizedExperiment","what":"Construct the sample metadata","title":"Practical analysis with SummarizedExperiments","text":"important sample metadata either data.frame DataFrame object SummarizedExperiment requires colData() rownames match colnames count matrix. Notice rownames metadata order colnames counts matrix. necessary.","code":"coldata <- data.frame(   SampleName = colnames(counts),   Treatment = gl(2, 3, labels = c(\"Control\", \"Treatment\")),   Age = sample.int(100, 6),   row.names = colnames(counts) )  # Take a peek at what this looks like coldata #>         SampleName Treatment Age #> Sample1    Sample1   Control  38 #> Sample2    Sample2   Control  71 #> Sample3    Sample3   Control  30 #> Sample4    Sample4 Treatment  64 #> Sample5    Sample5 Treatment   8 #> Sample6    Sample6 Treatment  47"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"construct-gene-range-annotations","dir":"Articles","previous_headings":"The SummarizedExperiment > Constructing a SummarizedExperiment","what":"Construct gene range annotations","title":"Practical analysis with SummarizedExperiments","text":"usually gene annotations GRanges objects loaded GTF file may even create GRanges specifying chromosome, start, end, strand, information manually.","code":"rowranges <- GRanges(   rep(c(\"chr1\", \"chr2\"), c(50, 150)),   IRanges(floor(runif(200, 1e5, 1e6)), width = 100),   strand = sample(c(\"+\", \"-\"), 200, TRUE),   feature_id = sprintf(\"ID%03d\", 1:200),   gene_type = sample(c(\"protein_coding\", \"lncRNA\", \"repeat_element\"), 200, replace = TRUE) ) names(rowranges) <- rownames(counts)  # Take a peek at what this looks like rowranges #> GRanges object with 200 ranges and 2 metadata columns: #>           seqnames        ranges strand |  feature_id      gene_type #>              <Rle>     <IRanges>  <Rle> | <character>    <character> #>     Gene1     chr1 954187-954286      - |       ID001 protein_coding #>     Gene2     chr1 552363-552462      + |       ID002 protein_coding #>     Gene3     chr1 303793-303892      - |       ID003         lncRNA #>     Gene4     chr1 875980-876079      + |       ID004 protein_coding #>     Gene5     chr1 427141-427240      - |       ID005 repeat_element #>       ...      ...           ...    ... .         ...            ... #>   Gene196     chr2 268871-268970      + |       ID196 repeat_element #>   Gene197     chr2 599914-600013      + |       ID197 repeat_element #>   Gene198     chr2 477464-477563      + |       ID198 repeat_element #>   Gene199     chr2 461424-461523      - |       ID199 repeat_element #>   Gene200     chr2 619939-620038      + |       ID200 protein_coding #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"construct-the-summarizedexperiment-object","dir":"Articles","previous_headings":"The SummarizedExperiment > Constructing a SummarizedExperiment","what":"Construct the SummarizedExperiment object","title":"Practical analysis with SummarizedExperiments","text":"pieces information ’re ready create SummarizedExperiment object.","code":"se <- SummarizedExperiment(   assays = list(counts = counts),   colData = coldata,   rowRanges = rowranges )  # Printing the object gives a summary of what's inside se #> class: RangedSummarizedExperiment  #> dim: 200 6  #> metadata(0): #> assays(1): counts #> rownames(200): Gene1 Gene2 ... Gene199 Gene200 #> rowData names(2): feature_id gene_type #> colnames(6): Sample1 Sample2 ... Sample5 Sample6 #> colData names(3): SampleName Treatment Age"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"accessing-parts-of-the-summarizedexperiment-object","dir":"Articles","previous_headings":"","what":"Accessing parts of the SummarizedExperiment object","title":"Practical analysis with SummarizedExperiments","text":"Every part SummarizedExperiment object can extracted accessor function. extract particular assay can use assay() function. extract column metadata can use colData() function. extract GRanges rows matrix can use rowRanges() function. rowData() function also allows access row-level annotation information data added rowData slot mcols() rowRanges. made clear .","code":""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"getting-the-count-matrix","dir":"Articles","previous_headings":"Accessing parts of the SummarizedExperiment object","what":"Getting the count matrix","title":"Practical analysis with SummarizedExperiments","text":"see assays available can use assays() function","code":"assay(se, \"counts\") |> head() #>       Sample1 Sample2 Sample3 Sample4 Sample5 Sample6 #> Gene1     100     210     186      14      95      43 #> Gene2      74      17      62      48      27      71 #> Gene3     129      72     105     203      73      63 #> Gene4      73      80      84      81      59     153 #> Gene5      17     242      32      21      58      40 #> Gene6      22      91      38      89     164      43 assays(se) #> List of length 1 #> names(1): counts"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"getting-the-column-metadata","dir":"Articles","previous_headings":"Accessing parts of the SummarizedExperiment object","what":"Getting the column metadata","title":"Practical analysis with SummarizedExperiments","text":"","code":"colData(se) #> DataFrame with 6 rows and 3 columns #>          SampleName Treatment       Age #>         <character>  <factor> <integer> #> Sample1     Sample1 Control          38 #> Sample2     Sample2 Control          71 #> Sample3     Sample3 Control          30 #> Sample4     Sample4 Treatment        64 #> Sample5     Sample5 Treatment         8 #> Sample6     Sample6 Treatment        47"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"getting-the-rowranges","dir":"Articles","previous_headings":"Accessing parts of the SummarizedExperiment object","what":"Getting the rowRanges","title":"Practical analysis with SummarizedExperiments","text":"","code":"rowRanges(se) #> GRanges object with 200 ranges and 2 metadata columns: #>           seqnames        ranges strand |  feature_id      gene_type #>              <Rle>     <IRanges>  <Rle> | <character>    <character> #>     Gene1     chr1 954187-954286      - |       ID001 protein_coding #>     Gene2     chr1 552363-552462      + |       ID002 protein_coding #>     Gene3     chr1 303793-303892      - |       ID003         lncRNA #>     Gene4     chr1 875980-876079      + |       ID004 protein_coding #>     Gene5     chr1 427141-427240      - |       ID005 repeat_element #>       ...      ...           ...    ... .         ...            ... #>   Gene196     chr2 268871-268970      + |       ID196 repeat_element #>   Gene197     chr2 599914-600013      + |       ID197 repeat_element #>   Gene198     chr2 477464-477563      + |       ID198 repeat_element #>   Gene199     chr2 461424-461523      - |       ID199 repeat_element #>   Gene200     chr2 619939-620038      + |       ID200 protein_coding #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"getting-the-rowdata","dir":"Articles","previous_headings":"Accessing parts of the SummarizedExperiment object","what":"Getting the rowData","title":"Practical analysis with SummarizedExperiments","text":"Note rowData case mcols() rowRanges","code":"rowData(se) #> DataFrame with 200 rows and 2 columns #>          feature_id      gene_type #>         <character>    <character> #> Gene1         ID001 protein_coding #> Gene2         ID002 protein_coding #> Gene3         ID003         lncRNA #> Gene4         ID004 protein_coding #> Gene5         ID005 repeat_element #> ...             ...            ... #> Gene196       ID196 repeat_element #> Gene197       ID197 repeat_element #> Gene198       ID198 repeat_element #> Gene199       ID199 repeat_element #> Gene200       ID200 protein_coding"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"modifying-a-summarizedexperiment","dir":"Articles","previous_headings":"","what":"Modifying a SummarizedExperiment","title":"Practical analysis with SummarizedExperiments","text":"create SummarizedExperiment stuck information object. SummarizedExperiments allow add modify data within object.","code":""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"adding-assays","dir":"Articles","previous_headings":"Modifying a SummarizedExperiment","what":"Adding assays","title":"Practical analysis with SummarizedExperiments","text":"example, may wish calculate counts per million values counts matrix add new assay back SummarizedExperiment object. Note: Instead creating intermediate variables also directly use assays like :","code":"# Calculate counts per million counts <- assay(se, \"counts\") cpm <- counts / colSums(counts) * 1e6  # Add the CPM data as a new assay to our existing se object assay(se, \"cpm\") <- cpm  # And if we wish to log-scale these values assay(se, \"logcounts\") <- log2(cpm)  # Now there are three assays available assays(se) #> List of length 3 #> names(3): counts cpm logcounts assay(se, \"cpm\") <- assay(se, \"counts\") / colSums(assay(se, \"counts\")) * 1e6"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"adding-metadata","dir":"Articles","previous_headings":"Modifying a SummarizedExperiment","what":"Adding metadata","title":"Practical analysis with SummarizedExperiments","text":"SummarizedExperiment objects use $ get set columns metadata contained colData slot. example, get Ages can use: want add new column simply create new column way","code":"se$Age #> [1] 38 71 30 64  8 47 se$Batch <- factor(rep(c(\"A\", \"B\", \"C\"), 2))  # Now you can se that a new 'Batch` column has been added to the colData colData(se) #> DataFrame with 6 rows and 4 columns #>          SampleName Treatment       Age    Batch #>         <character>  <factor> <integer> <factor> #> Sample1     Sample1 Control          38        A #> Sample2     Sample2 Control          71        B #> Sample3     Sample3 Control          30        C #> Sample4     Sample4 Treatment        64        A #> Sample5     Sample5 Treatment         8        B #> Sample6     Sample6 Treatment        47        C"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"adding-rowdata","dir":"Articles","previous_headings":"Modifying a SummarizedExperiment","what":"Adding rowData","title":"Practical analysis with SummarizedExperiments","text":"can also modify data describes feature matrix adding columns rowData. example, let’s create new column called Keep gene protein_coding gene.","code":"rowData(se)$Keep <- rowData(se)$gene_type == \"protein_coding\"  rowData(se) #> DataFrame with 200 rows and 3 columns #>          feature_id      gene_type      Keep #>         <character>    <character> <logical> #> Gene1         ID001 protein_coding      TRUE #> Gene2         ID002 protein_coding      TRUE #> Gene3         ID003         lncRNA     FALSE #> Gene4         ID004 protein_coding      TRUE #> Gene5         ID005 repeat_element     FALSE #> ...             ...            ...       ... #> Gene196       ID196 repeat_element     FALSE #> Gene197       ID197 repeat_element     FALSE #> Gene198       ID198 repeat_element     FALSE #> Gene199       ID199 repeat_element     FALSE #> Gene200       ID200 protein_coding      TRUE"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"subsetting-summarizedexperiment-objects","dir":"Articles","previous_headings":"","what":"Subsetting SummarizedExperiment objects","title":"Practical analysis with SummarizedExperiments","text":"SummarizedExperiments follow basic idea SummarizedExperiment “rows want” corresponds features rows matrix/rowData “columns want” corresponds metadata colData","code":"se[the rows you want, the columns you want]"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"subsetting-based-on-sample-metadata","dir":"Articles","previous_headings":"Subsetting SummarizedExperiment objects","what":"Subsetting based on sample metadata","title":"Practical analysis with SummarizedExperiments","text":"example, want select data belonging samples Treatment group can use following: Notice dim object changed 6 3. selected Samples original SummarizedExperiment object treatment group. cool thing SummarizedExperiments assays also subsetted reflect selection! Take look “logcounts” assay. contains Samples 4, 5, 6. course can combine multiple conditions well","code":"(trt <- se[, se$Treatment == \"Treatment\"]) #> class: RangedSummarizedExperiment  #> dim: 200 3  #> metadata(0): #> assays(3): counts cpm logcounts #> rownames(200): Gene1 Gene2 ... Gene199 Gene200 #> rowData names(3): feature_id gene_type Keep #> colnames(3): Sample4 Sample5 Sample6 #> colData names(4): SampleName Treatment Age Batch assay(trt, \"logcounts\") |> head() #>         Sample4  Sample5  Sample6 #> Gene1  9.681439 12.23369 11.09368 #> Gene2 11.306469 10.37294 11.82069 #> Gene3 13.329167 11.85724 11.85136 #> Gene4 11.957898 11.55359 12.97889 #> Gene5 10.059737 11.73207 10.98576 #> Gene6 12.146676 13.07906 11.04431 se[, se$Batch %in% c(\"B\", \"C\") & se$Age > 10] #> class: RangedSummarizedExperiment  #> dim: 200 3  #> metadata(0): #> assays(3): counts cpm logcounts #> rownames(200): Gene1 Gene2 ... Gene199 Gene200 #> rowData names(3): feature_id gene_type Keep #> colnames(3): Sample2 Sample3 Sample6 #> colData names(4): SampleName Treatment Age Batch"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"subsetting-based-on-rows","dir":"Articles","previous_headings":"Subsetting SummarizedExperiment objects","what":"Subsetting based on rows","title":"Practical analysis with SummarizedExperiments","text":"can also select certain features want keep using row subsetting. example select first 50 rows: Notice dim changed 200 50 reflecting fact selected first 50 rows. subsetting useful combined logical operators. created vector rowData called “Keep” contained TRUE corresponding row se object coding gene FALSE otherwise. Let’s use vector subset se object. look resulting rowData can see contains protein_coding features assay also reflects operation","code":"se[1:50, ] #> class: RangedSummarizedExperiment  #> dim: 50 6  #> metadata(0): #> assays(3): counts cpm logcounts #> rownames(50): Gene1 Gene2 ... Gene49 Gene50 #> rowData names(3): feature_id gene_type Keep #> colnames(6): Sample1 Sample2 ... Sample5 Sample6 #> colData names(4): SampleName Treatment Age Batch (coding <- se[rowData(se)$Keep, ]) #> class: RangedSummarizedExperiment  #> dim: 68 6  #> metadata(0): #> assays(3): counts cpm logcounts #> rownames(68): Gene1 Gene2 ... Gene193 Gene200 #> rowData names(3): feature_id gene_type Keep #> colnames(6): Sample1 Sample2 ... Sample5 Sample6 #> colData names(4): SampleName Treatment Age Batch rowData(coding) #> DataFrame with 68 rows and 3 columns #>          feature_id      gene_type      Keep #>         <character>    <character> <logical> #> Gene1         ID001 protein_coding      TRUE #> Gene2         ID002 protein_coding      TRUE #> Gene4         ID004 protein_coding      TRUE #> Gene8         ID008 protein_coding      TRUE #> Gene13        ID013 protein_coding      TRUE #> ...             ...            ...       ... #> Gene183       ID183 protein_coding      TRUE #> Gene185       ID185 protein_coding      TRUE #> Gene187       ID187 protein_coding      TRUE #> Gene193       ID193 protein_coding      TRUE #> Gene200       ID200 protein_coding      TRUE assay(coding, \"cpm\") |> head() #>         Sample1    Sample2   Sample3    Sample4  Sample5   Sample6 #> Gene1  5865.103 10646.3878  9453.141   821.1144 4816.223  2185.404 #> Gene2  3904.601   834.9295  3158.753  2532.7142 1326.065  3617.281 #> Gene4  3585.286  4075.8101  4432.250  3978.1936 3005.910  8073.027 #> Gene8  1582.946 12180.1483  1069.900  3165.8928 2603.016   815.162 #> Gene13 5571.848  4512.0406  6556.211 12199.4135 9936.629 15704.411 #> Gene15 5019.011  3405.1637 15366.569  6235.7414 4421.630  3988.270"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"subsetting-based-on-rowranges","dir":"Articles","previous_headings":"Subsetting SummarizedExperiment objects","what":"Subsetting based on rowRanges","title":"Practical analysis with SummarizedExperiments","text":"closely related row-wise subsetting operation can used RangedSummarizedExperiment (SummarizedExperiment rowRanges slot) allows perform operations SummarizedExperiment object like GRanges object. example, let’s say wanted extract features Chromosome 2 . can use GenomicRanges function subsetByOverlaps directly SummarizedExperiment object like : can see dim changed reflecting selection. , associated assays rowData also subsetted reflecting change well. ’s also shortcuts range operations using GRanges/SummarizedExperiments. See help pages %, %within%, %outside%. example:","code":"# Region of interest roi <- GRanges(seqnames = \"chr2\", ranges = 1:1e7)  # Subset the SE object for only features on chr2 (chr2 <- subsetByOverlaps(se, roi)) #> class: RangedSummarizedExperiment  #> dim: 150 6  #> metadata(0): #> assays(3): counts cpm logcounts #> rownames(150): Gene51 Gene52 ... Gene199 Gene200 #> rowData names(3): feature_id gene_type Keep #> colnames(6): Sample1 Sample2 ... Sample5 Sample6 #> colData names(4): SampleName Treatment Age Batch rowData(chr2) #> DataFrame with 150 rows and 3 columns #>          feature_id      gene_type      Keep #>         <character>    <character> <logical> #> Gene51        ID051 protein_coding      TRUE #> Gene52        ID052         lncRNA     FALSE #> Gene53        ID053 repeat_element     FALSE #> Gene54        ID054 repeat_element     FALSE #> Gene55        ID055 repeat_element     FALSE #> ...             ...            ...       ... #> Gene196       ID196 repeat_element     FALSE #> Gene197       ID197 repeat_element     FALSE #> Gene198       ID198 repeat_element     FALSE #> Gene199       ID199 repeat_element     FALSE #> Gene200       ID200 protein_coding      TRUE assay(chr2, \"counts\") |> head() #>        Sample1 Sample2 Sample3 Sample4 Sample5 Sample6 #> Gene51      32      45     139     261     153      95 #> Gene52     113      80      80      61      72     131 #> Gene53     118      24      60     153       5     103 #> Gene54      20       1      35       4      89      49 #> Gene55     249      58      43     307      51      33 #> Gene56     215      96      28     198      50      81 rowRanges(chr2) #> GRanges object with 150 ranges and 3 metadata columns: #>           seqnames        ranges strand |  feature_id      gene_type      Keep #>              <Rle>     <IRanges>  <Rle> | <character>    <character> <logical> #>    Gene51     chr2 839636-839735      + |       ID051 protein_coding      TRUE #>    Gene52     chr2 388487-388586      + |       ID052         lncRNA     FALSE #>    Gene53     chr2 357210-357309      + |       ID053 repeat_element     FALSE #>    Gene54     chr2 230565-230664      + |       ID054 repeat_element     FALSE #>    Gene55     chr2 491399-491498      + |       ID055 repeat_element     FALSE #>       ...      ...           ...    ... .         ...            ...       ... #>   Gene196     chr2 268871-268970      + |       ID196 repeat_element     FALSE #>   Gene197     chr2 599914-600013      + |       ID197 repeat_element     FALSE #>   Gene198     chr2 477464-477563      + |       ID198 repeat_element     FALSE #>   Gene199     chr2 461424-461523      - |       ID199 repeat_element     FALSE #>   Gene200     chr2 619939-620038      + |       ID200 protein_coding      TRUE #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths all.equal(se[se %over% roi, ], subsetByOverlaps(se, roi)) #> [1] TRUE"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"combining-subsetting-operations","dir":"Articles","previous_headings":"Subsetting SummarizedExperiment objects","what":"Combining subsetting operations","title":"Practical analysis with SummarizedExperiments","text":"course don’t perform one subsetting operation time. Like base R can combine multiple expressions subset SummarizedExperiment object. example, select features labeled repeat_elements Sample ‘Batch’ ‘Control’ group","code":"(selected <- se[   rowData(se)$gene_type == \"repeat_element\",   se$Treatment == \"Control\" &     se$Batch == \"A\" ]) #> class: RangedSummarizedExperiment  #> dim: 72 1  #> metadata(0): #> assays(3): counts cpm logcounts #> rownames(72): Gene5 Gene6 ... Gene198 Gene199 #> rowData names(3): feature_id gene_type Keep #> colnames(1): Sample1 #> colData names(4): SampleName Treatment Age Batch"},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"saving-a-summarizedexperiment","dir":"Articles","previous_headings":"","what":"Saving a SummarizedExperiment","title":"Practical analysis with SummarizedExperiments","text":"Since SummarizedExperiments keep basically information experiment one place, convenient save entire SummarizedExperiment object can pick analysis left even facilitate better sharing data collaborators. can save entire SummarizedExperiment object : saveRDS(se, \"/path//se.rds\") want read object back R next analysis can : se <- readRDS(\"/path//se.rds\")","code":""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"summarizedexperiments-in-the-real-world","dir":"Articles","previous_headings":"","what":"SummarizedExperiments in the real world","title":"Practical analysis with SummarizedExperiments","text":"’re working Bioconductor packages ’s likely object ’re working either SummarizedExperiment inherited one. example, DESeqDataSet DESeq2 package BSseq objects bsseq package inherit SummarizedExperiment thus retain functionality . go SummarizedExperiment landing page click “See ” details can see packages depend SummarizedExperiment. Also, many common methods also implemented SummarizedExperiment objects. example, simplify calculating counts-per-million simply used edgeR::cpm() directly SummarizedExperiment object. Many functions bioconductor packages know deal directly SummarizedExperiments don’t ever take trouble extracting components performing tedious calculations . also left discussion metadata() slot SummarizedExperiment. metadata slot simply list R object contains information experiment. metadata metadata slots subjected subsetting rules slots. practice assay contains additional information experiment whole. example, typically store bootstrap alignments sample . add something SummarizedExperiment metadata slot can : retrieve :","code":"assay(se, \"cpm\") <- edgeR::cpm(se) metadata(se)$additional_info <- \"Experiment performed on 6 samples with three replicates each\" metadata(se)$additional_info #> [1] \"Experiment performed on 6 samples with three replicates each\""},{"path":"/articles/Practical-analysis-with-SummarizedExperiments.html","id":"closing-thoughts","dir":"Articles","previous_headings":"","what":"Closing thoughts","title":"Practical analysis with SummarizedExperiments","text":"Hopefully enough information get started using SummarizedExperiments. ’s many things left different backings storing memory data, tidyverse interface SummarizedExperiment objects, TreeSummarizedExperiments microbiome data, MultiAssayExperiments dealing experiments containing multiomics data, much . Please let know thoughts anything needs clarification.","code":""},{"path":"/articles/rnaseq-workflow.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"RNAseq Workflow","text":"Differential gene expression analysis using RNA-seq typically consists several steps: Quality control fastq files tool like FastQC fastp Alignment fastq files reference genome using splice-aware aligner like STAR transcript quantification using pseudoaligner like Salmon. using genome aligner, read counting Rsubread::featureCounts HTSeq count generate gene counts. using transcript aligner, importing gene-level counts using appropriate offsets tximport tximeta Quality control plots count level data including PCA, heatmaps, relative-log expression boxplots, density plots count distributions, parallel coordinate plots libraries. Additionally, check assumptions global scaling normalization. Differential expression testing raw counts using edgeR, DESeq2, baySeq, limma::voom Creation results plots volcano MA plots. Gene ontology analysis interesting genes. Gene set enrichment analysis.","code":""},{"path":"/articles/rnaseq-workflow.html","id":"quality-control","dir":"Articles","previous_headings":"","what":"Quality Control","title":"RNAseq Workflow","text":"fastp quickly become favorite tool QC’ing fastq files primarily fast produces nice looking output files also amenable summarization MultiQC. fastp also perform adapter trimming default fastq files. tend fall camp believes read quality trimming necessary RNA-seq alignment. However, never experienced worse results using defaults fastp leave just inspect output carefully. simple bash script running fastp set fastq files might look something like : sample-names.txt simple text file basename like : important name results files *.fastp.{json|html} multiqc can recognize extensions combine results automatically.","code":"#!/usr/bin/env bash # # Run fastp on the raw fastq files # # ---------------------------------------------------------------------------- set -Eeou pipefail  FQ=/path/to/00_fastq       # Directory containing raw fastq files SAMPLES=sample-names.txt   # A text file listing basenames of fastq files OUT=/path/to/put/01_fastp  # Where to save the fastp results THREADS=8  mkdir -p $OUT  for SAMPLE in $(cat $SAMPLES) do     fastp -i $FQ/${SAMPLE}_R1.fq.gz \\           -I $FQ/${SAMPLE}_R2.fq.gz \\           -o $OUT/${SAMPLE}.trimmed.1.fq.gz \\           -O $OUT/${SAMPLE}.trimmed.2.fq.gz \\           -h $OUT/${SAMPLE}.fastp.html \\           -j $OUT/${SAMPLE}.fastp.json \\           -w $THREADS done Control1 Control2 Control3 Treatment1 Treatment2 Treatment3"},{"path":[]},{"path":"/articles/rnaseq-workflow.html","id":"salmon","dir":"Articles","previous_headings":"Alignment and Quantification","what":"Salmon","title":"RNAseq Workflow","text":"tend perform quantification Salmon order obtain transcript-level counts sample. simple bash script performing quantification Salmon looks like: tend always use --gcBias --seqBias flags don’t impair accuracy absence biases (quantification just takes little longer).","code":"#!/usr/bin/env bash # # Perform transcript quantification with Salmon # # ---------------------------------------------------------------------------- set -Eeou pipefail  SAMPLES=sample-names.txt  # Same sample-names.txt file as above   IDX=/path/to/salmon-idx   # Index used by Salmon FQ=/path/to/01_fastp      # Directory containing the fastp output OUT=/path/to/02_quants    # Where to save the Salmon results THREADS=12  mkdir -p $OUT  for SAMPLE in $(cat $SAMPLES) do     salmon quant \\            -i $IDX \\            -l A \\            -1 $FQ/${SAMPLE}.trimmed.1.fq.gz \\            -2 $FQ/${SAMPLE}.trimmed.2.fq.gz \\            --validateMappings \\            --gcBias \\            --seqBias \\            --threads $THREADS \\            -o $OUT/${SAMPLE}_quants done"},{"path":"/articles/rnaseq-workflow.html","id":"star","dir":"Articles","previous_headings":"Alignment and Quantification","what":"STAR","title":"RNAseq Workflow","text":"Sometimes also need produce genomic coordinates alignments. purpose tend use STAR generate BAM files well produce gene-level counts ’s inbuilt HTSeq-count functionality. simple bash script running STAR might look like: STAR tend use ENCODE default parameters human samples also output gene level counts using --quantMode GeneCounts flag.","code":"#!/usr/bin/env bash # # Align reads with STAR # # ---------------------------------------------------------------------------- set -Eeou pipefail  SAMPLES=sample-names.txt   # Same sample-names.txt file as above FQ=/path/to/01_fastp       # Directory containing the fastp output OUT=/path/to/03_STAR_outs  # Where to save the STAR results IDX=/path/to/STAR-idx      # Index used by STAR for alignment THREADS=24  mkdir -p $OUT  for SAMPLE in $(cat $SAMPLES) do   STAR --runThreadN $THREADS \\        --genomeDir $IDX \\        --readFilesIn ${FQ}/${SAMPLE}.trimmed.1.fq.gz ${FQ}/${SAMPLE}.trimmed.2.fq.gz \\        --readFilesCommand zcat \\        --outFilterType BySJout \\        --outFileNamePrefix ${OUT}/${SAMPLE}_ \\        --alignSJoverhangMin 8 \\        --alignSJDBoverhangMin 1 \\        --outFilterMismatchNmax 999 \\        --outFilterMismatchNoverReadLmax 0.04 \\        --alignIntronMin 20 \\        --alignIntronMax 1000000 \\        --alignMatesGapMax 1000000 \\        --outMultimapperOrder Random \\        --outSAMtype BAM SortedByCoordinate \\        --quantMode GeneCounts; done"},{"path":"/articles/rnaseq-workflow.html","id":"generating-a-matrix-of-gene-counts","dir":"Articles","previous_headings":"","what":"Generating a matrix of gene counts","title":"RNAseq Workflow","text":"recommended methods performing differential expression analysis implemented edgeR, DESeq2, baySeq, limma::voom require raw count matrices input data.","code":""},{"path":"/articles/rnaseq-workflow.html","id":"importing-transcript-level-counts-from-salmon","dir":"Articles","previous_headings":"Generating a matrix of gene counts","what":"Importing transcript level counts from Salmon","title":"RNAseq Workflow","text":"use R import quant files active session. tximeta download appropriate metadata reference genome used import results SummarizedExperiment object. Check tutorial working SummarizedExperiment objects unfamiliar structure. code create data.frame mapping sample names file paths containing quantification results. data.frame used tximeta import Salmon quantification results transcript level (along transcript annotations). , use summarizeToGene() summarize tx counts gene level. Finally, transform SummarizedExperiment object DGEList use downstream analysis edgeR","code":"library(tximeta) library(edgeR)   quant_files <- list.files(   path = \"02_quants\",   pattern = \"quant.sf\",   full.names = TRUE,   recursive = TRUE )  # Extract samples names from filepaths names(quant_files) <- gsub(\"02_quants\", \"\", quant_files, fixed = TRUE) names(quant_files) <- gsub(\"_quants/quant.sf\", \"\", names(quant_files), fixed = TRUE)  # Create metadata for import coldata <- data.frame(   names = names(quant_files),    files = quant_files,   group = factor(rep(c(\"Control\", \"Treatment\"), each = 3))   )  # Import transcript counts with tximeta se <- tximeta(coldata)  # Summarize tx counts to the gene-level gse <- summarizeToGene(se)  # Import into edgeR for downstream analysis y <- SE2DGEList(gse)"},{"path":"/articles/rnaseq-workflow.html","id":"importing-gene-counts-from-star","dir":"Articles","previous_headings":"Generating a matrix of gene counts","what":"Importing gene counts from STAR","title":"RNAseq Workflow","text":"used STAR generate counts HTSeq-count edgeR can directly import results downstream analysis like :","code":"library(edgeR)   # Specify the filepaths to gene counts from STAR count_files <- list.files(   path = \"03_STAR_outs\",    pattern = \"*.ReadsPerGene.out.tab\",    full.names = TRUE   )  # Name the file with their sample names names(count_files) <- gsub(\".ReadsPerGene.out.tab\", \"\", basename(count_files))  # Import HTSeq counts into a DGEList  y <- readDGE(   files = count_files,    columns = c(1, 2),  # Gene name and 'unstranded' count columns   group = factor(rep(c(\"Control\", \"Treatment\"), each = 3)),   labels = names(count_files)   )"},{"path":"/articles/rnaseq-workflow.html","id":"test-data","dir":"Articles","previous_headings":"","what":"Test data","title":"RNAseq Workflow","text":"use data airway package illustrate differential expression analysis steps. Please see Section 2 rnaseqGene workflow information. , load data airway package use SE2DGEList convert object DGElist use edgeR.","code":"library(airway) library(edgeR)   # Load the SummarizedExperiment object data(airway)  # Set the group levels airway$group <- factor(airway$dex, levels = c(\"untrt\", \"trt\"))  # Convert to a DGEList to be consistent with above steps y <- SE2DGEList(airway)"},{"path":"/articles/rnaseq-workflow.html","id":"library-qc","dir":"Articles","previous_headings":"","what":"Library QC","title":"RNAseq Workflow","text":"perform differential expression analysis important explore samples’ library distributions order ensure good quality downstream analysis. several diagnostic plots can use purpose implemented coriell package. However, first must remove features low counts meaningful differential expression analysis. can achieved using edgeR::filterByExpr(). stage often wise perform library QC library size normalized counts. give us idea potential global expression differences potential outliers introducing normalization factors. can use edgeR generate log2 counts-per-million values retained genes.","code":"# Determine which genes have enough counts to keep around keep <- filterByExpr(y)  # Remove the unexpressed genes y <- y[keep,,keep.lib.sizes = FALSE] logcounts <- cpm(y, log = TRUE)"},{"path":"/articles/rnaseq-workflow.html","id":"relative-log-expression-boxplots","dir":"Articles","previous_headings":"Library QC","what":"Relative log expression boxplots","title":"RNAseq Workflow","text":"first diagnostic plot can look plot relative log expression values. RLE plots good diagnostic tools evaluating unwanted variation libraries.  can see RLE plot samples centered around zero mostly similar distributions. also clear two samples, “SRR1039520” “SRR1039521”, slightly different distributions others.","code":"library(ggplot2) library(coriell)   plot_boxplot(logcounts, metadata = y$samples, fillBy = \"group\", rle = TRUE) +   labs(title = \"Relative Log Expression\",        x = \"Sample\",        y = \"RLE\",        color = \"Treatment Group\") +   theme_coriell()"},{"path":"/articles/rnaseq-workflow.html","id":"library-density-plots","dir":"Articles","previous_headings":"Library QC","what":"Library density plots","title":"RNAseq Workflow","text":"Library density plots show density reads corresponding particular magnitude counts. Shifts curves align group differences generally samples group overlapping density curves","code":"plot_density(logcounts, metadata = y$samples, colBy = \"group\") +   labs(title = \"Library Densities\",        x = \"logCPM\",        y = \"Density\",        color = \"Treatment Group\") +   theme_coriell()"},{"path":"/articles/rnaseq-workflow.html","id":"sample-vs-sample-distances","dir":"Articles","previous_headings":"Library QC","what":"Sample vs Sample Distances","title":"RNAseq Workflow","text":"can also calculate euclidean distance pairs samples display heatmap. , samples group show smaller distances sample pairs differing groups.","code":"plot_dist(logcounts, metadata = y$samples[, \"group\", drop = FALSE])"},{"path":"/articles/rnaseq-workflow.html","id":"parallel-coordinates-plot","dir":"Articles","previous_headings":"Library QC","what":"Parallel coordinates plot","title":"RNAseq Workflow","text":"Parallel coordinates plots useful giving idea variable genes change treatment groups. plots show expression gene line y-axis traced samples x-axis.","code":"plot_parallel(logcounts, y$samples, colBy = \"group\",                removeVar = 0.9, alpha = 0.05) +   labs(title = \"10% Most Variable Genes\",        x = \"Sample\",        y = \"logCPM\",        color = \"Treatment Group\") +   theme_coriell() #> Removing 90% lowest variance features..."},{"path":"/articles/rnaseq-workflow.html","id":"pca","dir":"Articles","previous_headings":"Library QC","what":"PCA","title":"RNAseq Workflow","text":"Principal components analysis unsupervised method reducing dimensionality dataset maintaining fundamental structure. PCA biplots can used examine sample groupings following PCA. biplots can reveal overall patterns expression well potential problematic samples prior downstream analysis. simple analyses expect see ‘main’ effect primarily along first component. like use PCAtools package quickly computing plotting principal components. complicated experiments also found UMAP (see coriell::UMAP()) useful dimensionality reduction.","code":"library(PCAtools)   # Perform PCA on the 20% most variable genes # Center and scale the variable after selecting most variable pca_result <- pca(   logcounts,    metadata = y$samples,    center = TRUE,    scale = TRUE,    removeVar = 0.8   )  # Show the PCA biplot biplot(   pca_result,    colby = \"group\",    hline = 0,    vline = 0,    hlineType = 2,    vlineType = 2,    legendPosition = \"bottom\",   title = \"PCA\",   caption = \"20% Most Variable Features\"   )"},{"path":"/articles/rnaseq-workflow.html","id":"assessing-global-scaling-normalization-assumptions","dir":"Articles","previous_headings":"Library QC","what":"Assessing global scaling normalization assumptions","title":"RNAseq Workflow","text":"downstream differential expression testing methods apply global scaling normalization factor library prior DE testing. Applying normalization factors global expression differences can lead spurious results. typical experiments usually problem dealing cancer epigenetic drug treatment can actually lead many problems identified. order identify potential violations global scaling normalization use quantro R package. quantro uses two data driven approaches assess appropriateness global scaling normalization. first involves testing medians distributions differ groups. differences indicate technical real biological variation. second test assesses ratio group variability within group variability using permutation test similar ANOVA. value large, suggests global adjustment methods might appropriate. Now can assess results. can use anova() test differences medians across groups. , significantly differ. can also plot results permutation test see :within group ratios. , large differences dataset suggesting global scaling normalization TMM appropriate.","code":"library(quantro)   # Initialize multiple (8) cores for permutation testing doParallel::registerDoParallel(cores = 8)  # Compute the qstat on the filtered libraries qtest <- quantro(y$counts, groupFactor = y$samples$group, B = 500) anova(qtest) #> Analysis of Variance Table #>  #> Response: objectMedians #>             Df  Sum Sq Mean Sq F value Pr(>F) #> groupFactor  1  1984.5  1984.5  0.3813 0.5596 #> Residuals    6 31225.5  5204.2 quantroPlot(qtest)"},{"path":"/articles/rnaseq-workflow.html","id":"differential-expression-testing-with-edger","dir":"Articles","previous_headings":"","what":"Differential expression testing with edgeR","title":"RNAseq Workflow","text":"removing lowly expressed features checking assumptions normalization can perform downstream differential expression testing edgeR. edgeR manual contains detailed explanation steps involved differential expression testing. short, need specify experimental design, estimate normalization factors, fit models, perform DE testing.","code":""},{"path":"/articles/rnaseq-workflow.html","id":"creating-the-experimental-design","dir":"Articles","previous_headings":"Differential expression testing with edgeR","what":"Creating the experimental design","title":"RNAseq Workflow","text":"Maybe important step DE analysis properly constructing design matrix. details design matrices outside scope tutorial good overview can found . Generally, samples fall nicely several well defined groups, facilitating use design matrix without intercept e.g. design ~ model.matrix(~0 + group, ...). kind design matrix makes relatively simple construct contrasts describe exactly pairs groups want compare. Since example experiment simply comparing treatments control samples can model differences means using model intercept intercept mean control samples 2nd coefficient represents differences treatment group. can make equivalent model test without intercept like : choice design . typically use whatever clearer experiment hand. case model intercept.","code":"# Model with intercept design <- model.matrix(~group, data = y$samples) # A means model design_no_intercept <- model.matrix(~0 + group, data = y$samples)  # Construct contrasts to test the difference in means between the groups cm <- makeContrasts(   Treatment_vs_Control = grouptrt - groupuntrt,   levels = design_no_intercept )"},{"path":"/articles/rnaseq-workflow.html","id":"estimating-normalization-factors","dir":"Articles","previous_headings":"Differential expression testing with edgeR","what":"Estimating normalization factors","title":"RNAseq Workflow","text":"use edgeR calculate trimmed mean M-value (TMM) normalization factors library. can check normalization creating MA plots library","code":"# Estimate TMM normalization factors y <- normLibSizes(y) par(mfrow = c(2, 4)) for (i in 1:ncol(y)) {   plotMD(cpm(y, log = TRUE), column = i)   abline(h = 0, lty = 2, col = \"red2\") }"},{"path":"/articles/rnaseq-workflow.html","id":"what-to-do-if-global-scaling-normalization-is-violated","dir":"Articles","previous_headings":"Differential expression testing with edgeR > Estimating normalization factors","what":"What to do if global scaling normalization is violated?","title":"RNAseq Workflow","text":"described testing violations global scaling normalization. assumptions violated don’t good set control genes spike-ins etc.? believe differences observing due true biological phenomena (big assumption) can try apply method smooth quantile normalization data using qsmooth package. show apply qsmooth filtered counts calculate offsets used downstream DE analysis edgeR. Please note benchmarked ‘official’ workflow just method implemented based reading forums github issues.","code":"library(qsmooth)   # Compute the smooth quantile factors  qs <- qsmooth(y$counts, group_factor = y$samples$group)  # Extract the qsmooth transformed data qsd <- qsmoothData(qs)  # Calculate offsets to be used by edgeR in place of norm.factors # Offsets are on the natural log scale. Add a small offset to avoid # taking logs of zero  offset <- log(y$counts + 0.1) - log(qsd + 0.1)  # Scale the offsets for internal usage by the DGEList object # Now the object is ready for downstream analysis y <- scaleOffset(y, offset = offset)  # To create logCPM values with the new norm factors use lcpm <- cpm(y, offset = y$offset, log = TRUE)"},{"path":"/articles/rnaseq-workflow.html","id":"fit-the-model","dir":"Articles","previous_headings":"Differential expression testing with edgeR","what":"Fit the model","title":"RNAseq Workflow","text":"New edgeR 4.0 ability estimate dispersions performing model fitting step. typically tend ‘robustify’ fit outliers. perform dispersion estimation legacy mode can use competitive gene set testing later. want use new workflow can use following: continue legacy workflow. ’s always good idea step check diagnostic plots edgeR","code":"# edgeR 4.0 workflow fit <- glmQLFit(y, design, legacy = FALSE, robust = TRUE) y <- estimateDisp(y, design, robust = TRUE) fit <- glmQLFit(y, design, robust = TRUE, legacy = TRUE) # Show the biological coefficient of variation plotBCV(y) # Show the dispersion estimates plotQLDisp(fit)"},{"path":"/articles/rnaseq-workflow.html","id":"test-for-differential-expression","dir":"Articles","previous_headings":"Differential expression testing with edgeR","what":"Test for differential expression","title":"RNAseq Workflow","text":"Now models fit can test differential expression. Often biologically relevant give weight higher fold changes. can acheived using glmTreat(). NOTE use glmQLFTest() filter fold-change - destroy FDR correction! testing fold change can use relatively modest values since fold change must exceed threshold considered significance. Values log2(1.2) log2(1.5) work well practice. case, results differential expression test can extracted data.frame downstream plotting coriell::edger_to_df()","code":"# Test the treatment fs control condition qlf <- glmQLFTest(fit, coef = 2) trt_vs_control_fc <- glmTreat(fit, coef = 2, lfc = log2(1.2)) de_result <- edger_to_df(qlf)"},{"path":"/articles/rnaseq-workflow.html","id":"plotting-de-results","dir":"Articles","previous_headings":"","what":"Plotting DE results","title":"RNAseq Workflow","text":"two common plots differential expression analysis results volcano plot MA plot. Volcano plots display negative log10 significance value y-axis vs log2 fold-change x-axis. MA plots show average expression gene x-axis vs log2 fold-change gene y-axis. coriell package includes functions producing .","code":"library(patchwork)   # Create a volcano plot of the results v <- plot_volcano(de_result, fdr = 0.05) + theme_coriell()  # Create and MA plot of the results m <- plot_md(de_result, fdr = 0.05) + theme_coriell()  # Patch both plots together (v | m) +    plot_annotation(title = \"Treatment vs. Control\") &   theme_coriell()"},{"path":"/articles/rnaseq-workflow.html","id":"competitive-gene-set-testing-with-camera","dir":"Articles","previous_headings":"","what":"Competitive gene set testing with camera()","title":"RNAseq Workflow","text":"’ve recently become aware problems gene set enrichment analysis using fgsea package. Following Gordon Smyth’s advice, switched pipelines using competitive gene set testing (appropriate) limma avoid problems correlated genes. use msigdb R package retrieve HALLMARK gene sets use limma::camera() gene set testing. Perform gene set testing. Note can use limma::camera() limma::mroast(), limma::romer() depending hypothesis tested. setup code provides valid input functions. See comment Aaron Lun describing difference camera roast. GSEA like hypothesis can use limma::romer() roast() performs self-contained gene set test, looks DE within set genes. camera() performs competitive gene set test, compares DE within gene set DE outside gene set. can also perform pre-ranked version camera test using cameraPR(). order use pre-ranked version need create ranking statistic. suggestion Gordon Smyth derive z-statistic F-scores like : Another useful plot show following gene set testing barcodeplot. barcodeplot displays enrichment given signature ranked list genes. limma::barcodeplot() function allows us easily create plots gene sets interest using ranking stat choice.","code":"library(msigdb) library(ExperimentHub) library(GSEABase)   # Get the gene set data msigdb_hs <- getMsigdb(org = \"hs\", id = \"SYM\", version = \"7.5\")  # Subset for only the HALLMARK sets hallmark <- subsetCollection(msigdb_hs, \"h\")  # Extract the gene symbols for each set as a list msigdb_ids <- geneIds(hallmark)  # Convert the gene sets into lists of indeces for edgeR idx <- ids2indices(gene.sets = msigdb_ids, identifiers = y$genes$gene_name) # Use camera to perform competitive gene set testing camera_result <- camera(y, idx, design, contrast = 2)  # Use mroast for rotational gene set testing - bump up number of rotations mroast_result <- mroast(y, idx, design, contrast = 2, nrot = 1e4)  # Use romer for GSEA like hypothesis testing romer_result <- romer(y, idx, design, contrast = 2) t_stat <- sign(de_result$logFC) * sqrt(de_result$`F`) z <- zscoreT(t_stat, df = qlf$df.total)  # Name the stat vector with the gene names  names(z) <- de_result$gene_name  # Use the z-scores as the ranking stat for cameraPR camera_pr_result <- cameraPR(z, idx) # Show barcodeplot using the z-scores barcodeplot(   z,    index = idx[[\"HALLMARK_ANDROGEN_RESPONSE\"]],    main = \"HALLMARK_ANDROGEN_RESPONSE\",   xlab = \"z-score\"   ) # Or you can use the logFC barcodeplot(   de_result$logFC,    index = idx[[\"HALLMARK_ANDROGEN_RESPONSE\"]],    main = \"HALLMARK_ANDROGEN_RESPONSE\",   xlab = \"logFC\"   )"},{"path":"/articles/rnaseq-workflow.html","id":"gene-ontology-go-over-representation-test","dir":"Articles","previous_headings":"","what":"Gene ontology (GO) over representation test","title":"RNAseq Workflow","text":"representation analysis can performed clusterProfiler package. , instead using entire gene list input select separate sets -regulated genes test see sets enriched differentially expressed gene list. Create results objects set genes results can converted data.frames combined : results can plotted dotplots :  can also create nice enrichment map showing similarity significant GO terms like :","code":"library(clusterProfiler) library(org.Hs.eg.db)   # Split the genes into up and down up_genes <- subset(   de_result,    FDR < 0.05 & logFC > 0,    \"gene_name\",    drop = TRUE   )  down_genes <- subset(   de_result,    FDR < 0.05 & logFC < 0,    \"gene_name\",    drop = TRUE   )  # Extract the list of all genes expressed in the experiment # to use as a background set universe <- unique(y$genes$gene_name) ego_up <- enrichGO(   gene = up_genes,   universe = universe,   OrgDb = org.Hs.eg.db,   keyType = \"SYMBOL\",   ont = \"ALL\",   pAdjustMethod = \"BH\",   pvalueCutoff = 0.01,   qvalueCutoff = 0.05,   readable = TRUE   )  ego_down <- enrichGO(   gene = down_genes,   universe = universe,   OrgDb = org.Hs.eg.db,   keyType = \"SYMBOL\",   ont = \"ALL\",   pAdjustMethod = \"BH\",   pvalueCutoff = 0.01,   qvalueCutoff = 0.05,   readable = TRUE   ) ego_up_df <- data.frame(ego_up) ego_down_df <- data.frame(ego_down)  ego_df <- data.table::rbindlist(   list(up = ego_up_df, down = ego_down_df),    idcol = \"Direction\"   ) d1 <- dotplot(ego_up) + labs(title = \"Up-regulated genes\") d2 <- dotplot(ego_down) + labs(title = \"Down-regulated genes\")  d1 | d2 em_up <- enrichplot::pairwise_termsim(ego_up) em_down <- enrichplot::pairwise_termsim(ego_down)  p1 <- enrichplot::emapplot(em_up, showCategory = 10, edge.params = list(min = 0.5)) +   labs(title = \"Up-regulated genes\") p2 <- enrichplot::emapplot(em_down, showCategory = 10, edge.params = list(min = 0.5)) +   labs(title = \"Down-regulated genes\")  p1 | p2"},{"path":"/articles/rnaseq-workflow.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"RNAseq Workflow","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-apple-darwin20 #> Running under: macOS Sonoma 14.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] org.Hs.eg.db_3.19.1         clusterProfiler_4.12.0      #>  [3] GSEABase_1.66.0             graph_1.82.0                #>  [5] annotate_1.82.0             XML_3.99-0.17               #>  [7] AnnotationDbi_1.66.0        ExperimentHub_2.12.0        #>  [9] AnnotationHub_3.12.0        BiocFileCache_2.12.0        #> [11] dbplyr_2.5.0                msigdb_1.12.0               #> [13] patchwork_1.2.0             quantro_1.38.0              #> [15] PCAtools_2.16.0             ggrepel_0.9.5               #> [17] coriell_0.15.0              ggplot2_3.5.1               #> [19] edgeR_4.2.0                 limma_3.60.3                #> [21] airway_1.24.0               SummarizedExperiment_1.34.0 #> [23] Biobase_2.64.0              GenomicRanges_1.56.1        #> [25] GenomeInfoDb_1.40.1         IRanges_2.38.1              #> [27] S4Vectors_0.42.1            BiocGenerics_0.50.0         #> [29] MatrixGenerics_1.16.0       matrixStats_1.3.0           #>  #> loaded via a namespace (and not attached): #>   [1] fs_1.6.4                  bitops_1.0-7              #>   [3] enrichplot_1.24.0         HDO.db_0.99.1             #>   [5] httr_1.4.7                RColorBrewer_1.1-3        #>   [7] doParallel_1.0.17         tools_4.4.1               #>   [9] doRNG_1.8.6               utf8_1.2.4                #>  [11] R6_2.5.1                  HDF5Array_1.32.0          #>  [13] lazyeval_0.2.2            rhdf5filters_1.16.0       #>  [15] withr_3.0.0               gridExtra_2.3             #>  [17] base64_2.0.1              preprocessCore_1.66.0     #>  [19] cli_3.6.3                 textshaping_0.4.0         #>  [21] scatterpie_0.2.3          labeling_0.4.3            #>  [23] sass_0.4.9                readr_2.1.5               #>  [25] genefilter_1.86.0         askpass_1.2.0             #>  [27] pkgdown_2.1.0             Rsamtools_2.20.0          #>  [29] systemfonts_1.1.0         yulab.utils_0.1.4         #>  [31] gson_0.1.0                siggenes_1.78.0           #>  [33] illuminaio_0.46.0         DOSE_3.30.1               #>  [35] scrime_1.3.5              rstudioapi_0.16.0         #>  [37] RSQLite_2.3.7             gridGraphics_0.5-1        #>  [39] generics_0.1.3            BiocIO_1.14.0             #>  [41] dplyr_1.1.4               GO.db_3.19.1              #>  [43] Matrix_1.7-0              fansi_1.0.6               #>  [45] abind_1.4-5               lifecycle_1.0.4           #>  [47] yaml_2.3.9                rhdf5_2.48.0              #>  [49] qvalue_2.36.0             SparseArray_1.4.8         #>  [51] grid_4.4.1                blob_1.2.4                #>  [53] dqrng_0.4.1               crayon_1.5.3              #>  [55] lattice_0.22-6            beachmat_2.20.0           #>  [57] cowplot_1.1.3             GenomicFeatures_1.56.0    #>  [59] KEGGREST_1.44.1           pillar_1.9.0              #>  [61] knitr_1.48                beanplot_1.3.1            #>  [63] fgsea_1.30.0              rjson_0.2.21              #>  [65] codetools_0.2-20          fastmatch_1.1-4           #>  [67] glue_1.7.0                ggfun_0.1.5               #>  [69] data.table_1.15.4         treeio_1.28.0             #>  [71] vctrs_0.6.5               png_0.1-8                 #>  [73] gtable_0.3.5              cachem_1.1.0              #>  [75] xfun_0.45                 S4Arrays_1.4.1            #>  [77] mime_0.12                 tidygraph_1.3.1           #>  [79] survival_3.6-4            pheatmap_1.0.12           #>  [81] iterators_1.0.14          statmod_1.5.0             #>  [83] nlme_3.1-164              ggtree_3.12.0             #>  [85] bit64_4.0.5               filelock_1.0.3            #>  [87] bslib_0.7.0               nor1mix_1.3-3             #>  [89] irlba_2.3.5.1             colorspace_2.1-0          #>  [91] DBI_1.2.3                 tidyselect_1.2.1          #>  [93] bit_4.0.5                 compiler_4.4.1            #>  [95] curl_5.2.1                xml2_1.3.6                #>  [97] desc_1.4.3                DelayedArray_0.30.1       #>  [99] shadowtext_0.1.3          rtracklayer_1.64.0        #> [101] scales_1.3.0              quadprog_1.5-8            #> [103] rappdirs_0.3.3            stringr_1.5.1             #> [105] digest_0.6.36             rmarkdown_2.27            #> [107] GEOquery_2.72.0           XVector_0.44.0            #> [109] htmltools_0.5.8.1         pkgconfig_2.0.3           #> [111] sparseMatrixStats_1.16.0  highr_0.11                #> [113] fastmap_1.2.0             rlang_1.1.4               #> [115] htmlwidgets_1.6.4         UCSC.utils_1.0.0          #> [117] DelayedMatrixStats_1.26.0 farver_2.1.2              #> [119] jquerylib_0.1.4           jsonlite_1.8.8            #> [121] BiocParallel_1.38.0       mclust_6.1.1              #> [123] GOSemSim_2.30.0           BiocSingular_1.20.0       #> [125] RCurl_1.98-1.14           magrittr_2.0.3            #> [127] ggplotify_0.1.2           GenomeInfoDbData_1.2.12   #> [129] Rhdf5lib_1.26.0           munsell_0.5.1             #> [131] Rcpp_1.0.12               ggnewscale_0.4.10         #> [133] ape_5.8                   viridis_0.6.5             #> [135] stringi_1.8.4             ggraph_2.2.1              #> [137] zlibbioc_1.50.0           MASS_7.3-60.2             #> [139] plyr_1.8.9                bumphunter_1.46.0         #> [141] minfi_1.50.0              parallel_4.4.1            #> [143] Biostrings_2.72.1         graphlayouts_1.1.1        #> [145] splines_4.4.1             multtest_2.60.0           #> [147] hms_1.1.3                 locfit_1.5-9.10           #> [149] igraph_2.0.3              rngtools_1.5.2            #> [151] reshape2_1.4.4            ScaledMatrix_1.12.0       #> [153] BiocVersion_3.19.1        evaluate_0.24.0           #> [155] BiocManager_1.30.23       tzdb_0.4.0                #> [157] foreach_1.5.2             tweenr_2.0.3              #> [159] tidyr_1.3.1               openssl_2.2.0             #> [161] purrr_1.0.2               polyclip_1.10-6           #> [163] reshape_0.8.9             ggforce_0.4.2             #> [165] rsvd_1.0.5                xtable_1.8-4              #> [167] restfulr_0.0.15           tidytree_0.4.6            #> [169] viridisLite_0.4.2         ragg_1.3.2                #> [171] tibble_3.2.1              aplot_0.2.3               #> [173] memoise_2.0.1             GenomicAlignments_1.40.0"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gennaro Calendo. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Calendo G (2024). coriell: Convenience Functions Bioinformatics. R package version 0.15.0, https://github.com/coriell-research/coriell.","code":"@Manual{,   title = {coriell: Convenience Functions for Bioinformatics},   author = {Gennaro Calendo},   year = {2024},   note = {R package version 0.15.0},   url = {https://github.com/coriell-research/coriell}, }"},{"path":"/index.html","id":"coriell","dir":"","previous_headings":"","what":"Convenience Functions for Bioinformatics","title":"Convenience Functions for Bioinformatics","text":"package contains helper functions common bioinformatics tasks (--common tasks). find reusing old code , let know ’ll create function put package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convenience Functions for Bioinformatics","text":"latest version can installed Github using:","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"coriell-research/coriell\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Convenience Functions for Bioinformatics","text":"Summarize results differential expression analysis Create volcano plot differential expression results Create md plot differential expression results Heatmap sensible defaults Parallel coordinates plot expression matrix Boxplot expression matrix Density plot expression matrix package also contains many convenience functions sure check reference page articles well.","code":""},{"path":"/index.html","id":"built-in-datasets","dir":"","previous_headings":"Examples","what":"Built-in datasets","title":"Convenience Functions for Bioinformatics","text":"datasets built package testing purposes used illustrate functionality. GSE161650_de : Differential expression results THZ1 vs DMSO GSE161650 GSE161650_lc : Normalized log2 counts THZ1 vs DMSO replicates GSE161650 head GSE161650_de looks like: GSE161650_lc: See package documentation ?GSE161650_de ?GSE161650_lc citation information.","code":">   feature_id     logFC unshrunk.logFC    logCPM       PValue          FDR > 1        JUN  5.759233       5.759908  9.079350 2.919097e-14 1.990666e-10 > 2       IER5  3.931325       3.931420 10.158336 3.365738e-14 1.990666e-10 > 3    GADD45B  5.813030       5.814071  8.432432 6.435666e-14 2.537583e-10 > 4       IER2  4.457981       4.458016 12.223835 1.528890e-13 4.521309e-10 > 5     PIK3R3 -4.018325      -4.019603  7.124408 2.122484e-13 4.752097e-10 > 6     HEXIM1  4.497345       4.497844  8.275561 2.696985e-13 4.752097e-10 >          DMSO.1     DMSO.2     DMSO.3    THZ1.1    THZ1.2     THZ1.3 > A1BG  5.3323512  5.4576081  5.2876011  6.703752 6.8090471  6.7908595 > AAAS  3.8738768  3.8839857  3.5242625  3.768811 4.1406003  3.7454773 > AACS  2.1381539  2.3748462  2.2761971  3.769163 3.4352003  3.4064114 > AADAT 0.8240013 -0.2391457 -0.8699138 -1.342273 0.1967574 -0.8355924 > AAED1 1.2814586  1.5332476  2.0735095  2.443188 2.1270932  0.9707206 > AAGAB 6.8747238  6.7396922  6.6670762  6.756664 6.5840839  6.7662317"},{"path":"/index.html","id":"summarize-results-from-differential-expression-test","dir":"","previous_headings":"Examples","what":"Summarize results from differential expression test","title":"Convenience Functions for Bioinformatics","text":"Return table //non-de counts percentages.","code":"de <- GSE161650_de  summarize_dge(de, fdr = 0.1) >     Direction    N Percent > 1          Up 2588   23.52 > 2        Down 3365   30.59 > 3 Unperturbed 5049   45.89"},{"path":"/index.html","id":"create-volcano-plot-from-differential-expression-results","dir":"","previous_headings":"Examples","what":"Create volcano plot from differential expression results","title":"Convenience Functions for Bioinformatics","text":"Different significance levels can used filter plotted points. example, significance levels can set specifying fdr lfc values.  Labels counts displayed default. remove set annotate_counts = FALSE  Text labels can also added DE genes setting label_sig = TRUE. label_sig = TRUE lab argument must also designate column containing names items plot. Additional arguments can passed ggrepel::geom_text_repel() via ... need modify behavior labels.  aesthetics points can also changed","code":"library(ggplot2)  plot_volcano(de) +    ggtitle(\"THZ1 vs Control\") +    theme_coriell() plot_volcano(de, fdr = 0.01, lfc = log2(2)) +    ggtitle(\"THZ1 vs Control\") +    theme_coriell() plot_volcano(de, fdr = 0.01, lfc = log2(2), annotate_counts = FALSE) +    ggtitle(\"THZ1 vs Control\") +    theme_coriell() plot_volcano(de, fdr = 0.01, lfc = log2(2), label_sig = TRUE, lab = \"feature_id\") +    ggtitle(\"THZ1 vs Control\") +    theme_coriell() plot_volcano(de,   fdr = 0.01,    lfc = log2(2),   up_color = \"firebrick\",   down_color = \"midnightblue\",   nonde_color = \"grey80\",   up_alpha = 0.8,   down_alpha = 0.8,   nonde_alpha = 0.25,   up_size = 0.5,   down_size = 0.5,   nonde_size = 0.5   ) +    ggtitle(\"THZ1 vs Control\") +    theme_coriell()"},{"path":"/index.html","id":"create-md-plot-from-differential-expression-results","dir":"","previous_headings":"Examples","what":"Create md plot from differential expression results","title":"Convenience Functions for Bioinformatics","text":"Different significance levels can used filter plotted points. example, significance levels can set specifying fdr lfc values.  Labels counts displayed default. remove set annotate_counts = FALSE  Text labels can also added DE genes setting label_sig = TRUE. label_sig = TRUE lab argument must also designate column containing names items plot. Additional arguments can passed ggrepel::geom_text_repel() via ... need modify behavior labels.  aesthetics points can also changed","code":"plot_md(de) +    ggtitle(\"THZ1 vs Control\") +    theme_coriell() plot_md(de, fdr = 0.01, lfc = log2(2)) +    ggtitle(\"THZ1 vs Control\") +    theme_coriell() plot_md(de, fdr = 0.01, lfc = log2(2), annotate_counts = FALSE) +    ggtitle(\"THZ1 vs Control\") +    theme_coriell() plot_md(de, fdr = 0.01, lfc = log2(2), label_sig = TRUE, lab = \"feature_id\") +    ggtitle(\"THZ1 vs Control\") +    theme_coriell() plot_md(de,   fdr = 0.01,    lfc = log2(2),   up_color = \"firebrick\",   down_color = \"midnightblue\",   nonde_color = \"grey80\",   up_alpha = 0.8,   down_alpha = 0.8,   nonde_alpha = 0.25,   up_size = 0.5,   down_size = 0.5,   nonde_size = 0.5   ) +    ggtitle(\"THZ1 vs Control\") +    theme_coriell()"},{"path":"/index.html","id":"heatmap-with-sensible-defaults","dir":"","previous_headings":"Examples","what":"Heatmap with sensible defaults","title":"Convenience Functions for Bioinformatics","text":"often use settings making calls pheatmap. function wrapper around pheatmap uses sensible default values expression data. default values can overridden simply supplying arguments quickmap pheatmap. also allows additional arguments passed quickmap function creating row column annotations.  pheatmap arguments can passed quickmap function well.  Additional arguments can set limit scales heatmap well remove low variance features prior plotting. remove low variance features set removeVar argument desired proportion features drop.  colors heatmap scale can also ‘fixed’ certain threshold fix_extreme thresh arguments","code":"logcounts <- GSE161650_lc  # plot a heatmap of the logCPM values quickmap(logcounts) # create annotation for columns col_df <- data.frame(Treatment = rep(c(\"DMSO\", \"THZ1\"), each = 3)) rownames(col_df) <- colnames(logcounts)  # create color scheme for treatment conditions ann_colors = list(Treatment = c(\"DMSO\" = \"steelblue\", \"THZ1\" = \"firebrick\"))  # plot the heatmap, passing additional args to pheatmap quickmap(   logcounts,   annotation_col = col_df,   annotation_colors = ann_colors,   main = \"Treatment vs Control\"   ) quickmap(   logcounts,   removeVar = 0.9,   annotation_col = col_df,   annotation_colors = ann_colors,   main = \"THZ1 vs DMSO\" ) quickmap(     logcounts,     removeVar = 0.9,     fix_extreme = TRUE,     thresh = 0.5,     annotation_col = col_df,     annotation_colors = ann_colors,     main = \"THZ1 vs DMSO\" )"},{"path":"/index.html","id":"parallel-coordinates-plot-of-expression-matrix","dir":"","previous_headings":"Examples","what":"Parallel coordinates plot of expression matrix","title":"Convenience Functions for Bioinformatics","text":"Parallel coordinates plots (PCP), well boxplots density plots (), can useful tools examining expression patterns across samples normalization, example. create PCP coriell use plot_parallel() function. Using logcounts define :  metadata supplied PCP can colored supplied variable name. Using col_df defined :","code":"# Create PCP plot -- passing additional alpha value to geom_line() plot_parallel(logcounts, alpha = 0.01) + theme_coriell() plot_parallel(logcounts, col_df, colBy = \"Treatment\", alpha = 0.01) +    theme_coriell()"},{"path":"/index.html","id":"boxplot-of-expression-matrix","dir":"","previous_headings":"Examples","what":"Boxplot of expression matrix","title":"Convenience Functions for Bioinformatics","text":"Likewise, boxplots expression values can visualized similar fashion plot_boxplot()  metadata supplied boxes can colored desired metadata column additional arguments can passed geom_boxplot() modify boxplots.","code":"plot_boxplot(logcounts) + theme_coriell() plot_boxplot(logcounts, col_df, fillBy = \"Treatment\", outlier.shape = NA) +    theme_coriell()"},{"path":"/index.html","id":"density-plot-of-expression-matrix","dir":"","previous_headings":"Examples","what":"Density plot of expression matrix","title":"Convenience Functions for Bioinformatics","text":"Density plots showing expression values samples groups can plotted using plot_density() function.  metadata supplied, lines can colored desired metadata column additional arguments can passed geom_density() modify density layer.","code":"plot_density(logcounts) + theme_coriell() plot_density(logcounts, col_df, colBy = \"Treatment\", size = 2) +    theme_coriell()"},{"path":"/reference/GSE161650_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential expression results from GSE161650 — GSE161650_de","title":"Differential expression results from GSE161650 — GSE161650_de","text":"subset differential expression results comp THZ1 (n=3) vs DMSO (n=3) samples analysis edgeR. See Details citation.","code":""},{"path":"/reference/GSE161650_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential expression results from GSE161650 — GSE161650_de","text":"","code":"GSE161650_de"},{"path":"/reference/GSE161650_de.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Differential expression results from GSE161650 — GSE161650_de","text":"data frame 11,002 rows 6 columns: feature_id Gene Symbol logFC log2 fold-change THZ1 vs DMSO unshrunk.logFC unshrunk log2 fold-change THZ1 vs DMSO logCPM Average logCPM across samples PValue Uncorrected PValue FDR FDR Adjusted PValue","code":""},{"path":"/reference/GSE161650_de.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Differential expression results from GSE161650 — GSE161650_de","text":"<https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE161650>","code":""},{"path":"/reference/GSE161650_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential expression results from GSE161650 — GSE161650_de","text":"Jiang B, Gao Y, Che J, Lu W et al. Discovery resistance mechanism selective CDK12 degrader. Nat Chem Biol 2021 Jun;17(6):675-683. PMID: 33753926","code":""},{"path":"/reference/GSE161650_lc.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized log2 counts from GSE161650 — GSE161650_lc","title":"Normalized log2 counts from GSE161650 — GSE161650_lc","text":"subset log2 expression counts containing THZ1 (n=3) vs DMSO (n=3) samples TMM normalization log2 transformation. See Details citation","code":""},{"path":"/reference/GSE161650_lc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized log2 counts from GSE161650 — GSE161650_lc","text":"","code":"GSE161650_lc"},{"path":"/reference/GSE161650_lc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Normalized log2 counts from GSE161650 — GSE161650_lc","text":"matrix 11,002 rows (Gene Symbols) 6 columns (Samples).","code":""},{"path":"/reference/GSE161650_lc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Normalized log2 counts from GSE161650 — GSE161650_lc","text":"<https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE161650>","code":""},{"path":"/reference/GSE161650_lc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalized log2 counts from GSE161650 — GSE161650_lc","text":"Jiang B, Gao Y, Che J, Lu W et al. Discovery resistance mechanism selective CDK12 degrader. Nat Chem Biol 2021 Jun;17(6):675-683. PMID: 33753926","code":""},{"path":"/reference/UMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform UMAP — UMAP","title":"Perform UMAP — UMAP","text":"function provides wrapper around umap::umap() exposes umap defaults function arguments.","code":""},{"path":"/reference/UMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform UMAP — UMAP","text":"","code":"UMAP(x, ...)  # S3 method for class 'pca' UMAP(   x,   n_neighbors = 15,   n_components = 2,   metric = \"euclidean\",   n_epochs = 200,   input = \"data\",   init = \"spectral\",   min_dist = 0.1,   set_op_mix_ratio = 1,   local_connectivity = 1,   bandwidth = 1,   alpha = 1,   gamma = 1,   negative_sample_rate = 5,   a = NA,   b = NA,   spread = 1,   random_state = NA,   transform_state = NA,   knn = NA,   knn_repeats = 1,   verbose = FALSE,   umap_learn_args = NA )  # S3 method for class 'prcomp' UMAP(   x,   metadata = NULL,   n_neighbors = 15,   n_components = 2,   metric = \"euclidean\",   n_epochs = 200,   input = \"data\",   init = \"spectral\",   min_dist = 0.1,   set_op_mix_ratio = 1,   local_connectivity = 1,   bandwidth = 1,   alpha = 1,   gamma = 1,   negative_sample_rate = 5,   a = NA,   b = NA,   spread = 1,   random_state = NA,   transform_state = NA,   knn = NA,   knn_repeats = 1,   verbose = FALSE,   umap_learn_args = NA )  # S3 method for class 'matrix' UMAP(   x,   metadata = NULL,   n_neighbors = 15,   n_components = 2,   metric = \"euclidean\",   n_epochs = 200,   input = \"data\",   init = \"spectral\",   min_dist = 0.1,   set_op_mix_ratio = 1,   local_connectivity = 1,   bandwidth = 1,   alpha = 1,   gamma = 1,   negative_sample_rate = 5,   a = NA,   b = NA,   spread = 1,   random_state = NA,   transform_state = NA,   knn = NA,   knn_repeats = 1,   verbose = FALSE,   umap_learn_args = NA )  # S3 method for class 'data.frame' UMAP(   x,   metadata = NULL,   n_neighbors = 15,   n_components = 2,   metric = \"euclidean\",   n_epochs = 200,   input = \"data\",   init = \"spectral\",   min_dist = 0.1,   set_op_mix_ratio = 1,   local_connectivity = 1,   bandwidth = 1,   alpha = 1,   gamma = 1,   negative_sample_rate = 5,   a = NA,   b = NA,   spread = 1,   random_state = NA,   transform_state = NA,   knn = NA,   knn_repeats = 1,   verbose = FALSE,   umap_learn_args = NA )  # S3 method for class 'dist' UMAP(   x,   metadata = NULL,   n_neighbors = 15,   n_components = 2,   metric = \"euclidean\",   n_epochs = 200,   input = \"dist\",   init = \"spectral\",   min_dist = 0.1,   set_op_mix_ratio = 1,   local_connectivity = 1,   bandwidth = 1,   alpha = 1,   gamma = 1,   negative_sample_rate = 5,   a = NA,   b = NA,   spread = 1,   random_state = NA,   transform_state = NA,   knn = NA,   knn_repeats = 1,   verbose = FALSE,   umap_learn_args = NA )"},{"path":"/reference/UMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform UMAP — UMAP","text":"x PCA object, prcomp object, numeric matrix/data.frame can converted numeric matrix n_neighbors Number nearest neighbors. Default 15 n_components Dimension target (output) space. Default 2 metric character function; determines distances data points computed. using string, available metrics : euclidean, manhattan. available generalized metrics : cosine, pearson, pearson2. Note triangle inequality may satisfied generalized metrics, hence knn search may optimal. using metric.function function, signature must function(matrix, origin, target) compute distance origin column target columns. Default \"euclidean\" n_epochs Number iterations performed layout optimization. Default 200 input character, use either \"data\" \"dist\"; determines whether primary input argument umap() treated data matrix distance matrix. Default \"data\" init character matrix. default string \"spectral\" computes initial embedding using eigenvectors connectivity graph matrix. alternative string \"random\", creates initial layout based random coordinates. setting.can also set matrix, case layout optimization begins provided coordinates. Default \"spectral\" min_dist numeric; determines close points appear final layout. Default 0.1 set_op_mix_ratio numeric range [0,1]; determines knn-graph used create fuzzy simplicial graph. Default 1 local_connectivity numeric; used construction fuzzy simplicial set. Default 1 bandwidth numeric; used construction fuzzy simplicial set. Default 1 alpha numeric; initial value \"learning rate\" layout optimization. Default 1 gamma numeric; determines, together alpha, learning rate layout optimization. Default 1 negative_sample_rate integer; determines many non-neighbor points used per point per iteration layout optimization. Default 5 numeric; contributes gradient calculations layout optimization. left NA, suitable value estimated automatically. Default NA b numeric; contributes gradient calculations layout optimization. left NA, suitable value estimated automatically. Default NA spread numeric; used automatic estimation /b parameters. Default 1 random_state integer; seed random number generation used umap(). Default NA transform_state nteger; seed random number generation used predict(). Default NA knn object class umap.knn; precomputed nearest neighbors. Default NA knn_repeats number times restart knn search. Default 1 verbose logical integer; determines whether show progress messages. Default FALSE umap_learn_args vector arguments python package umap-learn. Default NA metadata Optional data.frame sample-level metadata. Used prcomp object data.frame/matrix supplied. Default NULL","code":""},{"path":"/reference/UMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform UMAP — UMAP","text":"data.frame UMAP embeddings. metadata supplied metadata columns added results.","code":""},{"path":"/reference/UMAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform UMAP — UMAP","text":"","code":"# Create metadata for plotting metadata <- data.frame(row.names = colnames(GSE161650_lc)) metadata$Group <- rep(c(\"DMSO\", \"THZ1\"), each = 3)  # PCA with PCAtools p <- PCAtools::pca(GSE161650_lc, metadata, center = TRUE, scale = TRUE)  # PCA with prcomp pr <- prcomp(t(GSE161650_lc), center = TRUE, scale. = FALSE)  # Pre-calculated distance matrix d <- dist(t(GSE161650_lc))  # Perform UMAP on each data type udata <- UMAP(p, n_neighbors = 2) #> Warning: failed creating initial embedding; using random embedding instead #> Warning: failed creating initial embedding; using random embedding instead udata2 <- UMAP(pr, metadata, n_neighbors = 2) #> Warning: failed creating initial embedding; using random embedding instead #> Warning: failed creating initial embedding; using random embedding instead udata3 <- UMAP(d, metadata, n_neighbors = 2) #> Warning: failed creating initial embedding; using random embedding instead #> Warning: failed creating initial embedding; using random embedding instead  # Also on raw data udata4 <- UMAP(t(GSE161650_lc), metadata, n_neighbors = 2) #> Warning: failed creating initial embedding; using random embedding instead #> Warning: failed creating initial embedding; using random embedding instead"},{"path":"/reference/associate_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate associations between variables and principal components — associate_components","title":"Calculate associations between variables and principal components — associate_components","text":"Calculate associations metadata variables PCA rotations. function inspired methylKit::assocComp designed work arbitrary input data.","code":""},{"path":"/reference/associate_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate associations between variables and principal components — associate_components","text":"","code":"associate_components(x, metadata, N = 10, ...)"},{"path":"/reference/associate_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate associations between variables and principal components — associate_components","text":"x data.frame matrix values passed prcomp() metadata data.frame metadata variables test associations. rownames(metadata) must identical colnames(x). N First N PCs test associations . Default 10. ... Additional arguments passed prcomp() function.","code":""},{"path":"/reference/associate_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate associations between variables and principal components — associate_components","text":"data.frame rows metadata variable, columns PC, p-values given test cells.","code":""},{"path":"/reference/associate_components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate associations between variables and principal components — associate_components","text":"function returns p-values testing association given metadata column PC rotations. numeric values p-value returned computed using cor.test() function. factor variables variables can converted factor variables function return p-values wilcox.test() function kruskal.test() function (metadata variable > 2 levels).","code":""},{"path":"/reference/associate_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate associations between variables and principal components — associate_components","text":"","code":"# Specify metadata metadata <- data.frame(   age = c(30, 80, 34, 30, 80, 40),   treatment = factor(c(rep(\"Treatment\", 3), rep(\"Control\", 3))),   class = factor(c(rep(\"A\", 2), rep(\"B\", 2), rep(\"C\", 2))),   row.names = c(paste0(\"trt\", 1:3), paste0(\"ctrl\", 1:3)) )  # Create values to perform PCA on df <- data.frame(replicate(6, runif(1000, 0, 100))) colnames(df) <- c(paste0(\"trt\", 1:3), paste0(\"ctrl\", 1:3))  # Test for associations res <- associate_components(df, metadata)  # Show results head(res) #>                 PC1       PC2       PC3       PC4       PC5       PC6 #> age       0.3669306 0.6047674 0.2282258 0.6979298 0.4756648 0.1893065 #> treatment 1.0000000 0.7000000 1.0000000 0.4000000 0.4000000 0.1000000 #> class     0.5647181 0.3678794 0.5647181 1.0000000 0.1017014 0.1800923"},{"path":"/reference/clamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit values to a given range — clamp","title":"Limit values to a given range — clamp","text":"function useful input validation. value x given range function returns x. value outside range function returns either max min value range.","code":""},{"path":"/reference/clamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit values to a given range — clamp","text":"","code":"clamp(x, min, max)"},{"path":"/reference/clamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit values to a given range — clamp","text":"x numeric. Value validate min numeric. Minimum value range. max numeric. Maximum value range.","code":""},{"path":"/reference/clamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit values to a given range — clamp","text":"clamped value.","code":""},{"path":"/reference/clamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limit values to a given range — clamp","text":"","code":"clamp(c(-1, 121, 10, 15), min = 0, max = 100) #> [1]   0 100  10  15"},{"path":"/reference/clr.html","id":null,"dir":"Reference","previous_headings":"","what":"Centered Log-ratio transformation — clr","title":"Centered Log-ratio transformation — clr","text":"Calculate centered log-ratio transformation vector","code":""},{"path":"/reference/clr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centered Log-ratio transformation — clr","text":"","code":"clr(x, base = 2)"},{"path":"/reference/clr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centered Log-ratio transformation — clr","text":"x numeric vector base integer base log function. Default 2.","code":""},{"path":"/reference/clr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centered Log-ratio transformation — clr","text":"","code":"x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 1500) clr(x) #>  [1] -2.90198798 -1.90198798 -1.31702548 -0.90198798 -0.58005989 -0.31702548 #>  [7] -0.09463306  0.09801202  0.26793702  7.64875880"},{"path":"/reference/colmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Give means of rows of matrix based on column grouping variable — colmean","title":"Give means of rows of matrix based on column grouping variable — colmean","text":"Inspired edgeR::sumTechReps base::rowsum(), function takes average values group given group argument row data matrix.","code":""},{"path":"/reference/colmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give means of rows of matrix based on column grouping variable — colmean","text":"","code":"colmean(x, group, na.rm = FALSE)"},{"path":"/reference/colmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give means of rows of matrix based on column grouping variable — colmean","text":"x variable (gene) sample numeric matrix group Factor specifying grouping level averaged na.rm Logical (TRUE FALSE). NA (including NaN) values discarded?","code":""},{"path":"/reference/colmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give means of rows of matrix based on column grouping variable — colmean","text":"variable x nLevels(group) matrix","code":""},{"path":"/reference/colmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Give means of rows of matrix based on column grouping variable — colmean","text":"","code":"# Specify the Group levels Group <- gl(n = 2, k = 3, labels = c(\"DMSO\", \"THZ1\"))  # Take the average of every gene by treatment group by_group <- colmean(GSE161650_lc, group = Group) by_group[1:5, ] #>             DMSO       THZ1 #> A1BG   5.3591868  6.7678862 #> AAAS   3.7607083  3.8849627 #> AACS   2.2630657  3.5369248 #> AADAT -0.0950194 -0.6603692 #> AAED1  1.6294052  1.8470007"},{"path":"/reference/dfs2se.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list of differential expression data.frames to a SummarizedExperiment — dfs2se","title":"Convert a list of differential expression data.frames to a SummarizedExperiment — dfs2se","text":"function takes input list data.frames containing differential expression results converts list SummarizedExperiment object containing assays reported statistics columns. function intended used upstream meta-analysis functions implemented package.","code":""},{"path":"/reference/dfs2se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list of differential expression data.frames to a SummarizedExperiment — dfs2se","text":"","code":"dfs2se(   x,   feature_col = \"feature_id\",   import = c(\"logFC\", \"logCPM\", \"PValue\", \"FDR\"),   complete = FALSE )"},{"path":"/reference/dfs2se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list of differential expression data.frames to a SummarizedExperiment — dfs2se","text":"x List data.frames containing differential expression results. data.frames must matching colnames. feature_col Column name data.frames containing gene feature ids. Default \"feature_id\" import Character vector columns data.frames import. columns converted assays final SummarizedExperiment object. complete Use features found across datasets. Default FALSE, .e. fill data missing features NAs.","code":""},{"path":"/reference/dfs2se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list of differential expression data.frames to a SummarizedExperiment — dfs2se","text":"SummarizedExperiment object containing assays columns 'import'.","code":""},{"path":"/reference/dfs2se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a list of differential expression data.frames to a SummarizedExperiment — dfs2se","text":"","code":"# data.frames containing differential expression data exp1 <- data.frame(   feature_id = c(\"geneA\", \"geneB\", \"geneC\"),   PValue = c(0.01, 0.5, 0.05),   FDR = c(0.02, 0.5, 0.07),   logFC = c(1.2, -2.5, 3.7),   logCPM = c(12, 9, 0) )  exp2 <- data.frame(   feature_id = c(\"geneA\", \"geneB\", \"geneD\"),   PValue = c(0.07, 0.3, 0.8),   FDR = c(0.08, 0.4, 1.0),   logFC = c(1.5, -2.0, 3.0),   logCPM = c(14, 10, 2) )  # Combine into a single list l <- list(experiment1 = exp1, experiment2 = exp2)  # Convert the data to a SummarizedExperiment se <- dfs2se(l)  # Data is converted to assays SummarizedExperiment::assays(se) #> List of length 4 #> names(4): logFC logCPM PValue FDR"},{"path":"/reference/distinct_rgb_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a distinct RGB color palette — distinct_rgb_palette","title":"Generate a distinct RGB color palette — distinct_rgb_palette","text":"function uses kmeans() RGB colorspace generate N distinct RGB colors.","code":""},{"path":"/reference/distinct_rgb_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a distinct RGB color palette — distinct_rgb_palette","text":"","code":"distinct_rgb_palette(n, alpha = 1, ...)"},{"path":"/reference/distinct_rgb_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a distinct RGB color palette — distinct_rgb_palette","text":"n numeric. Number colors generate alpha numeric. Transparency level color palette (0-1). Default 1.0 ... arguments passed kmeans()","code":""},{"path":"/reference/distinct_rgb_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a distinct RGB color palette — distinct_rgb_palette","text":"vector distinct RGB colors","code":""},{"path":"/reference/distinct_rgb_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a distinct RGB color palette — distinct_rgb_palette","text":"function uses inaccurate defaults kmeans() function interest speed. usually problem kmeans() converge (colors distinct enough purposes). get warnings, like colors produced, can modify default arguments kmeans() function passing additional arguments .... example, increasing iterations can done passing iter.max = 100. Changing kmeans algorithm can done specifying algorithm = \"MacQueen\". Changing arguments may eliminate warnings produce distinct colors.","code":""},{"path":"/reference/edger_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert EdgeR results object to a data.frame — edger_to_df","title":"Convert EdgeR results object to a data.frame — edger_to_df","text":"Create data.frame edgeR results object. function calls edgeR::topTags() object extracts table data.frame features.","code":""},{"path":"/reference/edger_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert EdgeR results object to a data.frame — edger_to_df","text":"","code":"edger_to_df(res_obj, ...)"},{"path":"/reference/edger_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert EdgeR results object to a data.frame — edger_to_df","text":"res_obj edgeR results object converted ... Additional arguments passed edgeR::topTags()","code":""},{"path":"/reference/edger_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert EdgeR results object to a data.frame — edger_to_df","text":"data.frame","code":""},{"path":"/reference/edger_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert EdgeR results object to a data.frame — edger_to_df","text":"","code":"library(edgeR) #> Loading required package: limma library(coriell)  # create some fake data x <- data.frame(   ctl1 = rnbinom(1000, size = 0.4, prob = 1e-5),   ctl2 = rnbinom(1000, size = 0.4, prob = 1e-5),   trt1 = rnbinom(1000, size = 0.4, prob = 1e-5),   trt2 = rnbinom(1000, size = 0.4, prob = 1e-5),   row.names = paste0(\"gene\", 1:1000) )  # run edger pipeline group <- factor(c(1, 1, 2, 2)) y <- DGEList(counts = x, group = group) y <- calcNormFactors(y) design <- model.matrix(~group) y <- estimateDisp(y, design)  # To perform quasi-likelihood F-tests: fit <- glmQLFit(y, design) qlf <- glmQLFTest(fit, coef = 2)  # convert the results object to a dataframe -- do not filter the results res_df <- edger_to_df(qlf)  head(res_df) #>   feature_id     logFC    logCPM         F      PValue       FDR #> 1    gene594 -13.24234 10.480084 14.356292 0.001158432 0.6621542 #> 2    gene540  11.21107  8.757970 10.835400 0.003672453 0.6621542 #> 3    gene227  -9.82117  9.394335 10.000469 0.004987550 0.6621542 #> 4    gene457   9.76675  9.684480  9.487227 0.006013165 0.6621542 #> 5    gene278  12.23098 10.813620  9.422169 0.006123566 0.6621542 #> 6    gene347 -11.30740  8.118997  9.386549 0.006125219 0.6621542"},{"path":"/reference/env2global.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variable from an environment and remove that environment — env2global","title":"Extract variable from an environment and remove that environment — env2global","text":"function extract variables given environment assign global environment optionally remove environment.","code":""},{"path":"/reference/env2global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variable from an environment and remove that environment — env2global","text":"","code":"env2global(x, remove = TRUE)"},{"path":"/reference/env2global.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variable from an environment and remove that environment — env2global","text":"x Environment extract variables remove Environment removed extracting variables? Default TRUE","code":""},{"path":"/reference/env2global.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variable from an environment and remove that environment — env2global","text":"variables x assigned GlobalEnv execution","code":""},{"path":"/reference/env2global.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variable from an environment and remove that environment — env2global","text":"","code":"my_env <- new.env() my_env$X <- 1000 my_env$Y <- 1:10  # Extract X and Y to global environment and remove my_env env2global(my_env) #> Warning: object 'my_env' not found  # Extract X and Y to global environment and keep my_env env2global(my_env, remove = FALSE)"},{"path":"/reference/exact_cor_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform and exact correlation test on every row of a matrix — exact_cor_test","title":"Perform and exact correlation test on every row of a matrix — exact_cor_test","text":"Perform exact correlation permutation test. Computes correlation value every row matrix X permutations vector y.","code":""},{"path":"/reference/exact_cor_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform and exact correlation test on every row of a matrix — exact_cor_test","text":"","code":"exact_cor_test(X, y, ...)"},{"path":"/reference/exact_cor_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform and exact correlation test on every row of a matrix — exact_cor_test","text":"X numeric matrix data.frame can converted numeric matrix y numeric vector data correlate ... arguments passed `cor` function","code":""},{"path":"/reference/exact_cor_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform and exact correlation test on every row of a matrix — exact_cor_test","text":"data.frame containing original values X along columns containing correlation Xi Y, empirical p-value permutation test, FDR corrected empirical p-value","code":""},{"path":"/reference/geometric_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric mean of a vector — geometric_mean","title":"Geometric mean of a vector — geometric_mean","text":"Calculate geometric mean vector. function valid non-negative, non-NA containing vectors.","code":""},{"path":"/reference/geometric_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric mean of a vector — geometric_mean","text":"","code":"geometric_mean(x, zero_propagate = FALSE, ignore_zero = TRUE)"},{"path":"/reference/geometric_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric mean of a vector — geometric_mean","text":"x numeric vector non-negative values zero_propagate logical. zeros included calculation. Default FALSE. ignore_zero logical. zero values ignored calculation mean? Default TRUE.","code":""},{"path":"/reference/geometric_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric mean of a vector — geometric_mean","text":"geometric mean vector","code":""},{"path":"/reference/geometric_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometric mean of a vector — geometric_mean","text":"","code":"# Normal case geometric_mean(c(2, 5, 95, 5)) #> [1] 8.301822  # Default ignores 0s entirely geometric_mean(c(2, 5, 95, 5, 0, 0, 0, 0)) #> [1] 8.301822  # Ignore zero = FALSE -- zero is used in mean calculation geometric_mean(c(2, 5, 95, 5, 0, 0, 0, 0), ignore_zero = FALSE) #> [1] 2.881288  # Case with NA -- Returns NA geometric_mean(c(NA, 1, 2, 3)) #> [1] NA  # Case with 0 propagation -- Returns 0 geometric_mean(c(0, 1, 2, 3), zero_propagate = TRUE) #> [1] 0  # Case with negative -- Returns NaN geometric_mean(c(-1, 2, 3)) #> [1] NaN"},{"path":"/reference/get_axis_limits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the axis limits of a ggplot2 object — get_axis_limits","title":"Get the axis limits of a ggplot2 object — get_axis_limits","text":"Internal helper function used get axis limits plot","code":""},{"path":"/reference/get_axis_limits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the axis limits of a ggplot2 object — get_axis_limits","text":"","code":"get_axis_limits(p)"},{"path":"/reference/get_axis_limits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the axis limits of a ggplot2 object — get_axis_limits","text":"p ggplot plot object","code":""},{"path":"/reference/get_axis_limits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the axis limits of a ggplot2 object — get_axis_limits","text":"list elements x y limits","code":""},{"path":"/reference/horvath_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform ages using Horvath's method — horvath_age","title":"Transform ages using Horvath's method — horvath_age","text":"Transform age years using log transformation defined Horvath (2013). function can also used convert transformed ages back original scale.","code":""},{"path":"/reference/horvath_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform ages using Horvath's method — horvath_age","text":"","code":"horvath_age(x, adult_age = 20, inverse = FALSE)"},{"path":"/reference/horvath_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform ages using Horvath's method — horvath_age","text":"x numeric vector ages adult_age Age adult species. original manuscript, 20 humans 15 chimpanzees. inverse TRUE, return transformed ages original scale","code":""},{"path":"/reference/horvath_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform ages using Horvath's method — horvath_age","text":"transformed ages","code":""},{"path":"/reference/horvath_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform ages using Horvath's method — horvath_age","text":"Horvath, S. DNA methylation age human tissues cell types. Genome Biol 14, 3156 (2013). https://doi.org/10.1186/gb-2013-14-10-r115","code":""},{"path":"/reference/horvath_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform ages using Horvath's method — horvath_age","text":"","code":"age <- 0:100 transformed <- horvath_age(age) plot(age, transformed, xlab=\"Age\", ylab=\"Transformed Age\", type=\"l\")   # Conversion back to original scale all.equal(age, horvath_age(transformed, inverse = TRUE)) #> [1] TRUE"},{"path":"/reference/impute.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform simple imputation on rows of a matrix — impute","title":"Perform simple imputation on rows of a matrix — impute","text":"Impute NA values row matrix.","code":""},{"path":"/reference/impute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform simple imputation on rows of a matrix — impute","text":"","code":"impute(x, fun = median)"},{"path":"/reference/impute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform simple imputation on rows of a matrix — impute","text":"x numeric matrix data.frame can converted numeric matrix fun Imputation function apply rows matrix. Default median","code":""},{"path":"/reference/impute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform simple imputation on rows of a matrix — impute","text":"Matrix imputed values","code":""},{"path":"/reference/impute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform simple imputation on rows of a matrix — impute","text":"","code":"# Create a matrix of values with NAs X <- matrix(runif(25), 5, dimnames = list(paste0(\"CpG\", 1:5), paste0(\"Sample\", 1:5))) X[sample.int(25, 5)] <- NA X #>          Sample1   Sample2   Sample3    Sample4    Sample5 #> CpG1          NA 0.7403324 0.1575701         NA 0.09950194 #> CpG2 0.872853523 0.5677240 0.1141094 0.09897127 0.78451347 #> CpG3 0.672521725 0.1186733 0.1891373 0.06796681 0.21496728 #> CpG4 0.004080585        NA 0.8993360         NA         NA #> CpG5 0.265511174 0.6003532 0.3032485 0.08691927 0.36929772  # Impute missing values with row medians impute(X) #>          Sample1   Sample2   Sample3    Sample4    Sample5 #> CpG1 0.157570087 0.7403324 0.1575701 0.15757009 0.09950194 #> CpG2 0.872853523 0.5677240 0.1141094 0.09897127 0.78451347 #> CpG3 0.672521725 0.1186733 0.1891373 0.06796681 0.21496728 #> CpG4 0.004080585 0.4517083 0.8993360 0.45170827 0.45170827 #> CpG5 0.265511174 0.6003532 0.3032485 0.08691927 0.36929772  # Impute missing values with row mins impute(X, min) #>          Sample1     Sample2   Sample3     Sample4     Sample5 #> CpG1 0.099501943 0.740332381 0.1575701 0.099501943 0.099501943 #> CpG2 0.872853523 0.567723954 0.1141094 0.098971266 0.784513465 #> CpG3 0.672521725 0.118673346 0.1891373 0.067966805 0.214967275 #> CpG4 0.004080585 0.004080585 0.8993360 0.004080585 0.004080585 #> CpG5 0.265511174 0.600353186 0.3032485 0.086919273 0.369297724"},{"path":"/reference/jackknifeSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform jackknife resampling on all columns of a SummarizeExperiment object — jackknifeSE","title":"Perform jackknife resampling on all columns of a SummarizeExperiment object — jackknifeSE","text":"function provides simple wrapper perform jackknife resampling columns SummarizedExperiment object returns results resample list. function designed used assess robustness p-value combination techniques included meta_de() function theory arbitrary function operates columns SummarizedExperiment object used.","code":""},{"path":"/reference/jackknifeSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform jackknife resampling on all columns of a SummarizeExperiment object — jackknifeSE","text":"","code":"jackknifeSE(x, FUN, ...)"},{"path":"/reference/jackknifeSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform jackknife resampling on all columns of a SummarizeExperiment object — jackknifeSE","text":"x SummarizedExperiment object perform jackknife resampling columns FUN Function perform resample. ... Additional arguments passed FUN","code":""},{"path":"/reference/jackknifeSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform jackknife resampling on all columns of a SummarizeExperiment object — jackknifeSE","text":"List jackknife resampled results","code":""},{"path":"/reference/jackknifeSE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform jackknife resampling on all columns of a SummarizeExperiment object — jackknifeSE","text":"","code":"# Define three differential expression dataset data.frames exp1 <- data.frame(   feature_id = c(\"geneA\", \"geneB\", \"geneC\"),   PValue = c(0.01, 0.5, 0.05),   FDR = c(0.02, 0.5, 0.07),   logFC = c(1.2, -2.5, 3.7),   logCPM = c(12, 9, 0) )  exp2 <- data.frame(   feature_id = c(\"geneA\", \"geneB\", \"geneD\"),   PValue = c(0.07, 0.3, 0.8),   FDR = c(0.08, 0.4, 1.0),   logFC = c(1.5, -2.0, 3.0),   logCPM = c(14, 10, 2) )  exp3 <- data.frame(   feature_id = c(\"geneA\", \"geneB\", \"geneC\", \"geneD\"),   PValue = c(0.03, 0.3, 0.01, 0.8),   FDR = c(0.08, 0.4, 0.04, 0.9),   logFC = c(1.5, -2.0, 3.0, 4.1),   logCPM = c(14, 10, 1, 2.1) )  # Combine into a single list l <- list(experiment1 = exp1, experiment2 = exp2, experiment3 = exp3)  # Convert the data to a SummarizedExperiment se <- dfs2se(l)  # Perform the jackknife using meta_de on each subset of the data result <- jackknifeSE(se, \\(x) meta_de(x, metapod::parallelWilkinson, min.prop = 0.5)) #> Error in meta_de(x, metapod::parallelWilkinson, min.prop = 0.5): metapod package is required.  # Combine the results from calling meta_de on each resample and show result <- data.table::rbindlist(result, idcol = \"Jackknife\") #> Error in eval(expr, envir, enclos): object 'result' not found head(result[order(Feature)]) #> Error in eval(expr, envir, enclos): object 'result' not found"},{"path":"/reference/lerp.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear interpolation of a value — lerp","title":"Linear interpolation of a value — lerp","text":"Linear interpolation value","code":""},{"path":"/reference/lerp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear interpolation of a value — lerp","text":"","code":"lerp(x, min, max)"},{"path":"/reference/lerp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear interpolation of a value — lerp","text":"min numeric. Minimum desired range. max numeric. Maximum desired range. x. numeric. Normalized input value transformed. Value must 0-1.","code":""},{"path":"/reference/lerp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear interpolation of a value — lerp","text":"Value x within desired range given min, max.","code":""},{"path":"/reference/lerp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear interpolation of a value — lerp","text":"","code":"lerp(c(0.1, 0.25, 0.5, 0.75), min = 0, max = 100) #> [1] 10 25 50 75"},{"path":"/reference/list_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list of vectors to a binary matrix — list_to_matrix","title":"Convert a list of vectors to a binary matrix — list_to_matrix","text":"Convert list sets binary matrix.","code":""},{"path":"/reference/list_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list of vectors to a binary matrix — list_to_matrix","text":"","code":"list_to_matrix(sets)"},{"path":"/reference/list_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list of vectors to a binary matrix — list_to_matrix","text":"sets named list sets (vectors) converted binary matrix.","code":""},{"path":"/reference/list_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list of vectors to a binary matrix — list_to_matrix","text":"binary matrix column set. rownames matrix represent union sets. '1' indicates inclusion element set.","code":""},{"path":"/reference/list_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a list of vectors to a binary matrix — list_to_matrix","text":"","code":"sets <- list(   \"set1\" = letters[1:5],   \"set2\" = letters[2:6],   \"set3\" = letters[1:7] )  list_to_matrix(sets) #>   set1 set2 set3 #> a    1    0    1 #> b    1    1    1 #> c    1    1    1 #> d    1    1    1 #> e    1    1    1 #> f    0    1    1 #> g    0    0    1"},{"path":"/reference/map_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Map a value in one range to a value in another — map_value","title":"Map a value in one range to a value in another — map_value","text":"Map value one range value another","code":""},{"path":"/reference/map_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map a value in one range to a value in another — map_value","text":"","code":"map_value(x, old_min, old_max, new_min, new_max)"},{"path":"/reference/map_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map a value in one range to a value in another — map_value","text":"x numeric. Value transformed old_min numeric. Minimum value source range. old_max numeric. Maximum value source range. new_min numeric. Minimum value desired range. new_max numeric. Maximum value desired range.","code":""},{"path":"/reference/map_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map a value in one range to a value in another — map_value","text":"Value x mapped desired range.","code":""},{"path":"/reference/map_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map a value in one range to a value in another — map_value","text":"","code":"# Map values from the range 0-10 to the range 0-1 map_value(c(0, 1, 2, 3), 0, 10, 0, 1) #> [1] 0.0 0.1 0.2 0.3"},{"path":"/reference/meta_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform p-value combination for sets of differential expression tests — meta_de","title":"Perform p-value combination for sets of differential expression tests — meta_de","text":"function performs p-value combination genes estimates summary statistics average effect sizes experiments input SummarizedExperiment object.","code":""},{"path":"/reference/meta_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform p-value combination for sets of differential expression tests — meta_de","text":"","code":"meta_de(x, FUN, pval = \"PValue\", lfc = \"logFC\", ...)"},{"path":"/reference/meta_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform p-value combination for sets of differential expression tests — meta_de","text":"x SummarizedExperiment object containing combined differential expression results different studies. SE object must contain least two assays, one P-values combine effect sizes compute (e.g. logFC). FUN One 'parallel' functions provided metapod. One \"parallelBerger\", \"parallelFisher\", \"parallelHolmMin\", \"parallelPearson\", \"parallelSimes\", \"parallelStouffer\", \"parallelWilkinson\". pval assay name SE object containing P-values combine. lfc assay name SE object containing logFC values combine. ... Additional arguments passed FUN. See metapod package details.","code":""},{"path":"/reference/meta_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform p-value combination for sets of differential expression tests — meta_de","text":"data.table summary stats p-value combination experiments. Please see documentation metapod package details. returned columns, \"Rep.LogFC\" \"Rep.Pval\" contain results extracting representative effect P=value influential tests. individual tests data particularly important calculating combined effects.","code":""},{"path":"/reference/meta_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform p-value combination for sets of differential expression tests — meta_de","text":"","code":"# Example taken from ?dfs2se()  # Define two differential expression dataset data.frames exp1 <- data.frame(   feature_id = c(\"geneA\", \"geneB\", \"geneC\"),   PValue = c(0.01, 0.5, 0.05),   FDR = c(0.02, 0.5, 0.07),   logFC = c(1.2, -2.5, 3.7),   logCPM = c(12, 9, 0) )  exp2 <- data.frame(   feature_id = c(\"geneA\", \"geneB\", \"geneD\"),   PValue = c(0.07, 0.3, 0.8),   FDR = c(0.08, 0.4, 1.0),   logFC = c(1.5, -2.0, 3.0),   logCPM = c(14, 10, 2) )  # Combine into a single list l <- list(experiment1 = exp1, experiment2 = exp2)  # Convert the data to a SummarizedExperiment se <- dfs2se(l)  # Perform p-value combination across experiments for each gene #  using Wilkinson's method and passing additional values result <- meta_de(se, metapod::parallelWilkinson, min.prop = 0.1) #> Error in meta_de(se, metapod::parallelWilkinson, min.prop = 0.1): metapod package is required. head(result) #> Error in eval(expr, envir, enclos): object 'result' not found"},{"path":"/reference/minmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Min-Max normalize a value within a given range — minmax","title":"Min-Max normalize a value within a given range — minmax","text":"Min-Max normalize value within given range","code":""},{"path":"/reference/minmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min-Max normalize a value within a given range — minmax","text":"","code":"minmax(x, min = NA, max = NA)"},{"path":"/reference/minmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min-Max normalize a value within a given range — minmax","text":"x numeric. Value transformed (normalized). min numeric. Minimum value range. Default NA, use min supplied vector max numeric. Maximum value range. Default NA, use max supplied vector","code":""},{"path":"/reference/minmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min-Max normalize a value within a given range — minmax","text":"Normalized value (0-1) x range given min, max.","code":""},{"path":"/reference/minmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Min-Max normalize a value within a given range — minmax","text":"","code":"minmax(c(0, 1, 10, 100)) #> [1] 0.00 0.01 0.10 1.00  # Use a scale outside of the range of x minmax(c(0, 1, 10, 100), min = 0, max = 1000) #> [1] 0.000 0.001 0.010 0.100"},{"path":"/reference/outliers_by_iqr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute outliers by IQR method — outliers_by_iqr","title":"Compute outliers by IQR method — outliers_by_iqr","text":"Compute outliers columns numeric matrix using IQR method. column input matrix, value called outlier value less first quartile .e. Q1 - IQR * scale factor greater Q3 + IQR * scale factor.","code":""},{"path":"/reference/outliers_by_iqr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute outliers by IQR method — outliers_by_iqr","text":"","code":"outliers_by_iqr(X, scale_factor = 1.5)"},{"path":"/reference/outliers_by_iqr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute outliers by IQR method — outliers_by_iqr","text":"X numeric matrix data.frame can converted numeric matrix variables columns sample names rows. scale_factor numeric. Factor scale outlier range. default 1.5.","code":""},{"path":"/reference/outliers_by_iqr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute outliers by IQR method — outliers_by_iqr","text":"numeric matrix values 1L indicates outlier 0L indicates non-outlier","code":""},{"path":"/reference/outliers_by_iqr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute outliers by IQR method — outliers_by_iqr","text":"","code":"set.seed(12345) M <- matrix(   data = c(rnorm(10, 10, 1), rnorm(10, 100, 15)),   ncol = 2,   dimnames = list(paste0(\"sample\", 1:10), c(\"var1\", \"var2\")) )  # Create one outlier in first and last rows M[1, 1] <- 100 M[1, 2] <- 1000 M[10, 1] <- -10 M[10, 2] <- 0  # Show outliers on boxplot boxplot(M)   # Call outliers in each column outliers_by_iqr(M) #>          var1 var2 #> sample1     1    1 #> sample2     0    0 #> sample3     0    0 #> sample4     0    0 #> sample5     0    0 #> sample6     0    0 #> sample7     0    0 #> sample8     0    0 #> sample9     0    0 #> sample10    1    1"},{"path":"/reference/pairwise_fisher_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform pairwise fisher.tests on an input matrix — pairwise_fisher_test","title":"Perform pairwise fisher.tests on an input matrix — pairwise_fisher_test","text":"function perform fisher.test() columns relative given reference column input 2 x m matrix return data.frame results.","code":""},{"path":"/reference/pairwise_fisher_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform pairwise fisher.tests on an input matrix — pairwise_fisher_test","text":"","code":"pairwise_fisher_test(x, ref)"},{"path":"/reference/pairwise_fisher_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform pairwise fisher.tests on an input matrix — pairwise_fisher_test","text":"x numeric 2 x m data.frame, matrix, table ref column name reference column input matrix","code":""},{"path":"/reference/pairwise_fisher_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform pairwise fisher.tests on an input matrix — pairwise_fisher_test","text":"data.frame results test.","code":""},{"path":"/reference/pairwise_fisher_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform pairwise fisher.tests on an input matrix — pairwise_fisher_test","text":"function performs fisher test test column relative reference column input matrix. input matrix must 2 x m matrix. user's responsibility ensure levels rows align desired odds ratio calculation. e.g. R calculate odds ratio (x[1, \"test_col\"] / x[2, \"test_col\"]) / (x[1, \"ref_col\"] / x[2, \"ref_col\"]). user's responsibility make sure x[1, ] x[2, ] desired order.","code":""},{"path":"/reference/pairwise_fisher_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform pairwise fisher.tests on an input matrix — pairwise_fisher_test","text":"","code":"# From chisq.test docs: M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477))) dimnames(M) <- list(   gender = c(\"F\", \"M\"),   party = c(\"Democrat\", \"Independent\", \"Republican\") ) pairwise_fisher_test(M, ref = \"Independent\") #>                  comparison odds_ratio    ci_low   ci_high     p_value #> 1   Democrat vs Independent  1.1505995 0.9349959 1.4151128 0.178627092 #> 2 Republican vs Independent  0.7172647 0.5779167 0.8894628 0.002018961 #>   p_value_adj #> 1 0.357254185 #> 2 0.004037923"},{"path":"/reference/pairwise_intersections.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique pairwise intersections of a list of vectors — pairwise_intersections","title":"Get unique pairwise intersections of a list of vectors — pairwise_intersections","text":"function takes list vectors performs pairwise set intersections unique pairs vectors list.","code":""},{"path":"/reference/pairwise_intersections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique pairwise intersections of a list of vectors — pairwise_intersections","text":"","code":"pairwise_intersections(x)"},{"path":"/reference/pairwise_intersections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique pairwise intersections of a list of vectors — pairwise_intersections","text":"x List vectors perform intersections ","code":""},{"path":"/reference/pairwise_intersections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique pairwise intersections of a list of vectors — pairwise_intersections","text":"data.table data.table containing columns sets compared, list column contains actual values intersection, column intersection size.","code":""},{"path":"/reference/pairwise_intersections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get unique pairwise intersections of a list of vectors — pairwise_intersections","text":"","code":"l <- list(   Set1 = c(\"A\", \"B\", \"C\"),    Set2 = c(\"B\", \"C\", \"D\"),   Set3 = c(\"X\", \"Y\", \"Z\"),   Set4 = LETTERS )  pairwise_intersections(l) #>      Set1   Set2 Intersection Elements #>    <char> <char>       <list>    <num> #> 1:   Set1   Set2         B, C        2 #> 2:   Set1   Set3                     0 #> 3:   Set1   Set4      A, B, C        3 #> 4:   Set2   Set3                     0 #> 5:   Set2   Set4      B, C, D        3 #> 6:   Set3   Set4      X, Y, Z        3"},{"path":"/reference/panther_go.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform GO analysis with PANTHER — panther_go","title":"Perform GO analysis with PANTHER — panther_go","text":"statistical test tool, compares test gene list reference gene list, determines whether particular class (e.g. molecular function, biological process, cellular component, PANTHER protein class, PANTHER pathway Reactome pathway) genes overrepresented underrepresented.","code":""},{"path":"/reference/panther_go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform GO analysis with PANTHER — panther_go","text":"","code":"panther_go(   gene_list,   organism,   annot_dataset,   ref_input_list = NULL,   enrichment_test_type = \"fisher\",   correction = \"fdr\",   verbose = 0 )"},{"path":"/reference/panther_go.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform GO analysis with PANTHER — panther_go","text":"gene_list character vector. Maximum 100,000 identifiers. Can following: Ensemble gene identifier, Ensemble protein identifier, Ensemble transcript identifier, Entrez gene id, gene symbol, NCBI GI, HGNC Id, International protein index id, NCBI UniGene id, UniProt accession UniProt id organism character string. Taxon ID (e.g. \"9606\" HUMAN, \"10090\" MOUSE, \"10116\" RAT). get list available taxon IDs see: annot_dataset character string. One c(\"biological_process\", \"molecular_function\", \"cellular_component\", \"panther_go_slim_mf\", \"panther_go_slim_bp\", \"panther_go_slim_cc\", \"panther_pc\", \"panther_pathway\", \"panther_reactome_pathway\"). see: full descriptions. ref_input_list Reference set genes specified organism. NULL (default) PANTHER use genes specified organism. enrichment_test_type character string. One c(\"fisher\", \"binomial\"). Default \"fisher\" correction character string. One c(\"fdr\", \"bonferroni\", \"none\"). Default \"fdr\"","code":"curl -X GET \"https://pantherdb.org/services/oai/pantherdb/supportedgenomes\" -H  \"accept: application/json\" curl -X POST \"https://pantherdb.org/services/oai/pantherdb/supportedannotdatasets\" -H \"accept: application/json\""},{"path":"/reference/panther_go.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform GO analysis with PANTHER — panther_go","text":"data.table results representation analysis. See PANTHER user manual column descriptions \"table\".","code":""},{"path":"/reference/panther_go.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform GO analysis with PANTHER — panther_go","text":"Sends request PANTHER db perform representation analysis. function excludes option import reference list reference organism. default, case, PANTHER use genes given organism reference list.","code":""},{"path":"/reference/panther_go.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform GO analysis with PANTHER — panther_go","text":"","code":"genes <- c(   \"CTNNB1\", \"ADAM17\", \"AXIN1\", \"AXIN2\", \"CCND2\", \"CSNK1E\", \"CTNNB1\",   \"CUL1\", \"DKK1\", \"DKK4\", \"DLL1\", \"DVL2\", \"FRAT1\", \"FZD1\", \"FZD8\",   \"GNAI1\", \"HDAC11\", \"HDAC2\", \"HDAC5\", \"HEY1\", \"HEY2\", \"JAG1\",   \"JAG2\", \"KAT2A\", \"LEF1\", \"MAML1\", \"MYC\", \"NCOR2\", \"NCSTN\",   \"NKD1\", \"NOTCH1\", \"NOTCH4\", \"NUMB\", \"PPARD\", \"PSEN2\", \"PTCH1\",   \"RBPJ\", \"SKP2\", \"TCF7\", \"TP53\", \"WNT1\", \"WNT5B\", \"WNT6\" )  result <- panther_go(genes, \"9606\", \"biological_process\") head(result) #>    number_in_list fold_enrichment          fdr  expected number_in_reference #>             <int>           <num>        <num>     <num>               <int> #> 1:             14       64.716981 2.713230e-18 0.2163265                 106 #> 2:             14       64.716981 2.713230e-18 0.2163265                 106 #> 3:             21       17.926829 3.751588e-18 1.1714286                 574 #> 4:             21       17.926829 3.751588e-18 1.1714286                 574 #> 5:             30        7.080925 1.790665e-17 4.2367347                2076 #> 6:             30        7.080925 1.790665e-17 4.2367347                2076 #>          pValue         term plus_minus #>           <num>       <list>     <char> #> 1: 1.780101e-22   GO:0060070          + #> 2: 1.780101e-22 canonica....          + #> 3: 4.922697e-22   GO:0048729          + #> 4: 4.922697e-22 tissue m....          + #> 5: 3.524469e-21   GO:0007166          + #> 6: 3.524469e-21 cell sur....          +"},{"path":"/reference/permutation_correlation_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a permutation correlation test on every row of a matrix — permutation_correlation_test","title":"Perform a permutation correlation test on every row of a matrix — permutation_correlation_test","text":"Compute correlation value every row X vector y n random permutations y. number possible permutations less argument n_perm exact test performed instead. cases function returns data.frame original data additional columns test statistic, empirical p-value, FDR corrected empirical p-value.","code":""},{"path":"/reference/permutation_correlation_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a permutation correlation test on every row of a matrix — permutation_correlation_test","text":"","code":"permutation_correlation_test(X, y, n_perm = 10000, n_core = 1, ...)"},{"path":"/reference/permutation_correlation_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a permutation correlation test on every row of a matrix — permutation_correlation_test","text":"X numeric matrix data.frame can converted numeric matrix y numeric vector values correlate rows X n_perm integer. desired number permutations sample . Default (10,000) n_core integer. number cores use processing. Default (1) ... Additional arguments pass `cor` function","code":""},{"path":"/reference/permutation_correlation_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a permutation correlation test on every row of a matrix — permutation_correlation_test","text":"","code":"# generate example data X <- matrix(runif(1e3 * 10), nrow = 1e3, ncol = 10) y <- 1:10 dimnames(X) <- list(paste(\"feature\", 1:1e3, sep = \".\"), paste(\"sample\", 1:10, sep = \".\"))  # correlate each row of X with 1,000 random permutations of vector y res <- permutation_correlation_test(X, y, n_perm = 1e3, n_core = 8, method = \"spearman\")  head(res) #>            sample.1  sample.2   sample.3   sample.4   sample.5  sample.6 #> feature.1 0.7821933 0.6602043 0.48967790 0.75132905 0.60629744 0.6202229 #> feature.2 0.4291988 0.2354373 0.61205202 0.51226119 0.03515643 0.6820479 #> feature.3 0.9272740 0.7137101 0.04128511 0.28267931 0.87701057 0.6256800 #> feature.4 0.7732432 0.8436818 0.94495533 0.09581502 0.25778071 0.7987585 #> feature.5 0.2596812 0.7661008 0.17228455 0.51790417 0.59102029 0.2347332 #> feature.6 0.3212247 0.7935108 0.15859775 0.55098693 0.18830556 0.9114281 #>             sample.7  sample.8   sample.9  sample.10        cor empirical.p #> feature.1 0.91611895 0.8945791 0.01401642 0.16415494 -0.2969697       0.208 #> feature.2 0.58738448 0.2587961 0.67671086 0.79105816  0.5272727       0.057 #> feature.3 0.21747829 0.6450892 0.67225925 0.03130573 -0.4545455       0.097 #> feature.4 0.06514611 0.3728736 0.49071237 0.78709861 -0.2848485       0.198 #> feature.5 0.49508171 0.2482119 0.17214143 0.52142752 -0.2121212       0.282 #> feature.6 0.32647564 0.5998900 0.99117209 0.57493332  0.4545455       0.106 #>                 FDR #> feature.1 0.4571429 #> feature.2 0.3774834 #> feature.3 0.4173554 #> feature.4 0.4489796 #> feature.5 0.4723618 #> feature.6 0.4206349"},{"path":"/reference/permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate all permutations of a vector — permutations","title":"Generate all permutations of a vector — permutations","text":"Given input vector, generate matrix permutations row represents permutation data. Stolen : https://stackoverflow.com//34287541","code":""},{"path":"/reference/permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate all permutations of a vector — permutations","text":"","code":"permutations(x)"},{"path":"/reference/permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate all permutations of a vector — permutations","text":"x vector","code":""},{"path":"/reference/permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate all permutations of a vector — permutations","text":"factorial(x) x length(x) matrix","code":""},{"path":"/reference/permutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate all permutations of a vector — permutations","text":"","code":"v <- letters[1:4] p <- permutations(v) p #>       [,1] [,2] [,3] [,4] #>  [1,] \"a\"  \"b\"  \"c\"  \"d\"  #>  [2,] \"a\"  \"b\"  \"d\"  \"c\"  #>  [3,] \"a\"  \"c\"  \"b\"  \"d\"  #>  [4,] \"a\"  \"c\"  \"d\"  \"b\"  #>  [5,] \"a\"  \"d\"  \"b\"  \"c\"  #>  [6,] \"a\"  \"d\"  \"c\"  \"b\"  #>  [7,] \"b\"  \"a\"  \"c\"  \"d\"  #>  [8,] \"b\"  \"a\"  \"d\"  \"c\"  #>  [9,] \"b\"  \"c\"  \"a\"  \"d\"  #> [10,] \"b\"  \"c\"  \"d\"  \"a\"  #> [11,] \"b\"  \"d\"  \"a\"  \"c\"  #> [12,] \"b\"  \"d\"  \"c\"  \"a\"  #> [13,] \"c\"  \"a\"  \"b\"  \"d\"  #> [14,] \"c\"  \"a\"  \"d\"  \"b\"  #> [15,] \"c\"  \"b\"  \"a\"  \"d\"  #> [16,] \"c\"  \"b\"  \"d\"  \"a\"  #> [17,] \"c\"  \"d\"  \"a\"  \"b\"  #> [18,] \"c\"  \"d\"  \"b\"  \"a\"  #> [19,] \"d\"  \"a\"  \"b\"  \"c\"  #> [20,] \"d\"  \"a\"  \"c\"  \"b\"  #> [21,] \"d\"  \"b\"  \"a\"  \"c\"  #> [22,] \"d\"  \"b\"  \"c\"  \"a\"  #> [23,] \"d\"  \"c\"  \"a\"  \"b\"  #> [24,] \"d\"  \"c\"  \"b\"  \"a\""},{"path":"/reference/plot_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create boxplot from expression data — plot_boxplot","title":"Create boxplot from expression data — plot_boxplot","text":"Create boxplot (violin plot) expression distributions given expression matrix. Optionally plot relative log expression matrix.","code":""},{"path":"/reference/plot_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create boxplot from expression data — plot_boxplot","text":"","code":"plot_boxplot(x, ...)  # Default S3 method plot_boxplot(x)  # S3 method for class 'matrix' plot_boxplot(   x,   metadata = NULL,   fillBy = NULL,   rle = FALSE,   violin = FALSE,   ... )  # S3 method for class 'data.frame' plot_boxplot(   x,   metadata = NULL,   fillBy = NULL,   rle = FALSE,   violin = FALSE,   ... )  # S3 method for class 'SummarizedExperiment' plot_boxplot(   x,   assay = \"counts\",   fillBy = NULL,   rle = FALSE,   violin = FALSE,   ... )"},{"path":"/reference/plot_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create boxplot from expression data — plot_boxplot","text":"x matrix expression values SummarizedExperiment object ... Additional parameters passed ggplot2::geom_boxplot() ggplot2::geom_violin() metadata data.frame containing metadata per sample. rownames metadata must match colnames input matrix. Default NULL, sample x plotted individually. fillBy metadata column used fill boxplots. Default NULL, sample distinct color. rle Plot relative log expression value. option assumes input matrix already logged. sure take log input matrix prior setting option. violin Plot data violin plot instead boxplot. Default FALSE. assay SummarizedExperiment supplied assay used. Default \"counts\"","code":""},{"path":"/reference/plot_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create boxplot from expression data — plot_boxplot","text":"ggplot object","code":""},{"path":"/reference/plot_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create boxplot from expression data — plot_boxplot","text":"","code":"# Create metadata for plotting metadata <- data.frame(row.names = colnames(GSE161650_lc)) metadata$Group <- rep(c(\"DMSO\", \"THZ1\"), each = 3)  # Plot the boxplot by sample plot_boxplot(GSE161650_lc) +   theme_coriell()   # Plot the boxplot by coloring each Group plot_boxplot(GSE161650_lc, metadata, fillBy = \"Group\") +   theme_coriell()   # Create a violin plot after RLE transformation plot_boxplot(GSE161650_lc, metadata, fillBy = \"Group\", rle = TRUE, violin = TRUE) +   theme_coriell()"},{"path":"/reference/plot_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot of expression values — plot_density","title":"Density plot of expression values — plot_density","text":"Create density plot expression values given expression matrix.","code":""},{"path":"/reference/plot_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot of expression values — plot_density","text":"","code":"plot_density(x, ...)  # Default S3 method plot_density(x)  # S3 method for class 'matrix' plot_density(x, metadata = NULL, colBy = NULL, ...)  # S3 method for class 'data.frame' plot_density(x, metadata = NULL, colBy = NULL, ...)  # S3 method for class 'SummarizedExperiment' plot_density(x, assay = \"counts\", colBy = NULL, ...)"},{"path":"/reference/plot_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot of expression values — plot_density","text":"x gene sample matrix SummarizedExperiment object ... Additional parameters passed ggplot2::geom_density() metadata data.frame containing metadata per sample. rownames metadata must match colnames input matrix. Default NULL, sample matrix plotted. colBy metadata column used color density lines. Default NULL, sample matrix plotted. assay assay SummarizedExperiment object. Default \"counts\"","code":""},{"path":"/reference/plot_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot of expression values — plot_density","text":"ggplot object","code":""},{"path":"/reference/plot_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density plot of expression values — plot_density","text":"","code":"# Create metadata for plotting metadata <- data.frame(row.names = colnames(GSE161650_lc)) metadata$Group <- rep(c(\"DMSO\", \"THZ1\"), each = 3)  # Plot the density by sample plot_density(GSE161650_lc) +   theme_coriell()   # Color each sample by their Group in metadata plot_density(GSE161650_lc, metadata, colBy = \"Group\") +   theme_coriell()"},{"path":"/reference/plot_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the distance between all columns of a matrix — plot_dist","title":"Plot the distance between all columns of a matrix — plot_dist","text":"Create column-vs-column heatmap matrix","code":""},{"path":"/reference/plot_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the distance between all columns of a matrix — plot_dist","text":"","code":"plot_dist(x, metadata = NULL, method = \"euclidean\", ...)"},{"path":"/reference/plot_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the distance between all columns of a matrix — plot_dist","text":"x numeric matrix data.frame can converted one. Samples columns, features rows. metadata data.frame containing metadata used row labels. Default NULL. method distance method used. Must one distance measure used. must one \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\" \"minkowski\" ... additional values passed pheatmap::pheatmap()","code":""},{"path":"/reference/plot_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the distance between all columns of a matrix — plot_dist","text":"heatmap distance values displayed cells.","code":""},{"path":"/reference/plot_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the distance between all columns of a matrix — plot_dist","text":"","code":"# Generate a matrix of simulated counts counts <- simulate_counts()$table  # Create annotation metadata df <- data.frame(   row.names = colnames(counts),    Group = rep(c(\"Control\", \"Treatment\"), each = 3)   )  # Show the sample-vs-sample distances plot_dist(counts)   # Additional arguments can be passed to the function plot_dist(   x = counts,    metadata = df,    main = \"Sample-vs-Sample Distance\",    color = viridisLite::rocket(n = 50),   annotation_colors = list(Group = c(\"Treatment\" = \"firebrick2\", \"Control\" = \"grey80\"))   )"},{"path":"/reference/plot_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an MD plot from expression data — plot_md","title":"Create an MD plot from expression data — plot_md","text":"Create MD (MA) plot data.frame containing differential expression results.","code":""},{"path":"/reference/plot_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an MD plot from expression data — plot_md","text":"","code":"plot_md(   df,   x = \"logCPM\",   y = \"logFC\",   sig_col = \"FDR\",   lab = NULL,   fdr = 0.1,   lfc = 0,   annotate_counts = TRUE,   label_sig = FALSE,   up_color = \"red2\",   down_color = \"royalblue2\",   nonde_color = \"grey40\",   up_alpha = 1,   down_alpha = 1,   nonde_alpha = 1,   up_size = 1,   down_size = 1,   nonde_size = 1,   up_shape = 19,   down_shape = 19,   nonde_shape = 19,   xmax_label_offset = 0.8,   ymax_label_offset = 0.5,   ymin_label_offset = 0.5,   lab_size = 8,   lab_digits = 2,   x_axis_limits = NULL,   y_axis_limits = NULL,   ... )"},{"path":"/reference/plot_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an MD plot from expression data — plot_md","text":"df dataframe containing log-fold-change, p-value, logCPM columns. x column dataframe containing logCPM data. Default (\"logCPM\") y column dataframe containing log-fold-change values. Default (\"logFC\") sig_col column dataframe containing results significance testing. Default (\"FDR\") lab column dataframe containing labels plot label_sig = TRUE. Default NULL fdr numeric. Significance level cutoff plotting. Values given fdr threshold considered significant. Default (0.05) lfc numeric. Log-fold-change cutoff plotting. Values greater abs(lfc) less fdr displayed differentially expressed. Default(0) annotate_counts TRUE/FALSE. Annotate plot summarized gene counts label_sig logical. Apply ggrepel::geom_text_repel() significant DE genes. Default FALSE up_color Point color -regulated features. Default (\"red2\") down_color Point color -regulated features. Default (\"royalblue2\") nonde_color Point color unperturbed features. Default (\"grey40\") up_alpha Point alpha value -regulated features. Default (1) down_alpha Point alpha value -regulated features. Default (1) nonde_alpha Point alpha value unperturbed features. Default (1) up_size Point size -regulated features. Default (1) down_size Point size -regulated features. Default (1) nonde_size Point size unperturbed features. Default (1) up_shape Point shape -regulated features down_shape Point shape -regulated features nonde_shape Point shape unperturbed features xmax_label_offset numeric. Value 0 1 inclusive. Controls x-position count labels ymax_label_offset numeric. Value 0 1 inclusive. Controls y-position '' count label ymin_label_offset numeric. Value 0 1 inclusive. Controls y-position '' count label lab_size numeric. annotate_counts = TRUE specify label size. Default = 8. lab_digits numeric. number digits used rounding percentage values annotate_counts=TRUE. Default (2) x_axis_limits numeric vector axis limits supplied ggplot2::coord_cartesian(). Default (NULL) y_axis_limits numeric vector axis limits supplied ggplot2::coord_cartesian(). Default (NULL) ... Additional arguments passed ggrepel::geom_text_repel()","code":""},{"path":"/reference/plot_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an MD plot from expression data — plot_md","text":"ggplot MD plot","code":""},{"path":"/reference/plot_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an MD plot from expression data — plot_md","text":"","code":"plot_md(GSE161650_de, fdr = 0.01, lfc = log2(2))"},{"path":"/reference/plot_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel coordinates plot of expression data — plot_parallel","title":"Parallel coordinates plot of expression data — plot_parallel","text":"parallel coordinates plot display line plot showing expression value gene y-axis sample x-axis.","code":""},{"path":"/reference/plot_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel coordinates plot of expression data — plot_parallel","text":"","code":"plot_parallel(x, ...)  # Default S3 method plot_parallel(x)  # S3 method for class 'matrix' plot_parallel(x, metadata = NULL, colBy = NULL, removeVar = NULL, ...)  # S3 method for class 'data.frame' plot_parallel(x, metadata = NULL, colBy = NULL, removeVar = NULL, ...)  # S3 method for class 'SummarizedExperiment' plot_parallel(x, assay = \"counts\", colBy = NULL, removeVar = NULL, ...)"},{"path":"/reference/plot_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel coordinates plot of expression data — plot_parallel","text":"x gene sample matrix SummarizedExperiment object ... Additional parameters passed ggplot2::geom_line() metadata data.frame containing metadata per sample. rownames metadata colBy metadata column used color lines. Default NULL, every sample get color. removeVar Remove proportion features based variance across rows. Default NULL, features plotted. assay assay SummarizedExperiment object plotted. Default \"counts\".","code":""},{"path":"/reference/plot_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel coordinates plot of expression data — plot_parallel","text":"ggplot object","code":""},{"path":"/reference/plot_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel coordinates plot of expression data — plot_parallel","text":"","code":"# Create metadata for plotting metadata <- data.frame(row.names = colnames(GSE161650_lc)) metadata$Group <- rep(c(\"DMSO\", \"THZ1\"), each = 3)  # Plot the PCP for each sample -- passing alpha value to geom_line() plot_parallel(GSE161650_lc, alpha = 0.01) +   theme_coriell()   # Plot the PCP by coloring each sample by Group from metadata plot_parallel(GSE161650_lc, metadata, colBy = \"Group\", alpha = 0.01) +   theme_coriell()"},{"path":"/reference/plot_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results of UMAP — plot_umap","title":"Plot results of UMAP — plot_umap","text":"function creates simple plot data.frame returned umap() function.","code":""},{"path":"/reference/plot_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results of UMAP — plot_umap","text":"","code":"plot_umap(   df,   x = \"UMAP1\",   y = \"UMAP2\",   colBy = NULL,   shapeBy = NULL,   pointSize = 3,   pointAlpha = 1,   hline = 0,   vline = 0,   hlineType = 2,   vlineType = 2 )"},{"path":"/reference/plot_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results of UMAP — plot_umap","text":"df data.frame UMAP embeddings metadata x First UMAP component. Default \"UMAP1\" y Second UMAP component. Default \"UMAP2\" colBy Column name data.frame color points . Default NULL shapeBy Column name data.frame shape points . Default NULL pointSize Size points. Default 3 pointAlpha Alpha level points. Default 1 hline y-position horizontal line. Default 0 vline x-position vertical line. Default 0 hlineType linetype horizontal line. Default 2 vlineType linetype vertical line. Default 2","code":""},{"path":"/reference/plot_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results of UMAP — plot_umap","text":"ggplot object","code":""},{"path":"/reference/plot_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot results of UMAP — plot_umap","text":"","code":"# Create metadata for plotting metadata <- data.frame(row.names = colnames(GSE161650_lc)) metadata$Group <- rep(c(\"DMSO\", \"THZ1\"), each = 3)  # PCA with PCAtools p <- PCAtools::pca(GSE161650_lc, metadata, center = TRUE, scale = TRUE) udata <- coriell::UMAP(p, n_neighbors = 2) #> Warning: failed creating initial embedding; using random embedding instead #> Warning: failed creating initial embedding; using random embedding instead plot_umap(udata, colBy = \"Group\")"},{"path":"/reference/plot_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from expression data — plot_volcano","title":"Create a volcano plot from expression data — plot_volcano","text":"Create volcano plot data.frame containing differential expression results.","code":""},{"path":"/reference/plot_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from expression data — plot_volcano","text":"","code":"plot_volcano(   df,   x = \"logFC\",   y = \"FDR\",   lab = NULL,   fdr = 0.1,   lfc = 0,   label_sig = FALSE,   annotate_counts = TRUE,   up_color = \"red2\",   down_color = \"royalblue2\",   nonde_color = \"grey40\",   up_alpha = 1,   down_alpha = 1,   nonde_alpha = 1,   up_size = 1,   down_size = 1,   nonde_size = 1,   up_shape = 19,   down_shape = 19,   nonde_shape = 19,   xmin_label_offset = 0.5,   xmax_label_offset = 0.5,   ymax_label_offset = 0.8,   lab_size = 8,   lab_digits = 2,   x_axis_limits = NULL,   y_axis_limits = NULL,   ... )"},{"path":"/reference/plot_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from expression data — plot_volcano","text":"df dataframe containing columns gene names, p-values, log-fold changes. x logFC column. Default (logFC) y FDR p-value column. Default (FDR) lab column containing gene id labels. Default (NULL) fdr significance level cutoff plotting. Values given fdr threshold considered significant. Default (0.05) lfc log-fold-change cutoff plotting. Values greater abs(lfc) less fdr displayed differentially expressed. Default (0) label_sig TRUE/FALSE. apply ggrepel::geom_text_labels significant DE genes. annotate_counts TRUE/FALSE. Annotate plot summarized gene counts up_color Point color -regulated features down_color Point color -regulated features nonde_color Point color unperturbed features up_alpha Point alpha -regulated features down_alpha Point alpha -regulated features nonde_alpha Point alpha unperturbed features up_size Point size -regulated features down_size Point size -regulated features nonde_size Point size unperturbed features up_shape Point shape -regulated features down_shape Point shape -regulated features nonde_shape Point shape unperturbed features xmin_label_offset numeric. Value 0 1 inclusive control x-position count annotation label '' counts xmax_label_offset numeric. Value 0 1 inclusive control x-position count annotation label '' counts ymax_label_offset numeric. Value 0 1 inclusive control y-position count labels. lab_size numeric. Size label annotate_counts = TRUE. Default 8. lab_digits numeric. number digits used rounding percentage values annotate_counts=TRUE. Default (2) x_axis_limits numeric vector axis limits supplied ggplot2::coord_cartesian(). Default (NULL) y_axis_limits numeric vector axis limits supplied ggplot2::coord_cartesian(). Default (NULL) ... Additional arguments passed ggrepel::geom_text_repel","code":""},{"path":"/reference/plot_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from expression data — plot_volcano","text":"ggplot volcano plot","code":""},{"path":"/reference/plot_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from expression data — plot_volcano","text":"","code":"plot_volcano(GSE161650_de, fdr = 0.01, lfc = log2(2))"},{"path":"/reference/quickmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap with sensible defaults for RNA-seq expression data — quickmap","title":"Heatmap with sensible defaults for RNA-seq expression data — quickmap","text":"Generate heatmap using pheatmap sensible defaults RNA-seq. quickmap() also attempt perform vectorized scaling, clustering, distance calculations functions Rfast, fastcluster rdist packages order speed calculations large gene expression matrices.","code":""},{"path":"/reference/quickmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap with sensible defaults for RNA-seq expression data — quickmap","text":"","code":"quickmap(   mat,   diverging_palette = TRUE,   fix_extreme = FALSE,   thresh = 1.96,   removeVar = NULL,   ... )"},{"path":"/reference/quickmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap with sensible defaults for RNA-seq expression data — quickmap","text":"mat numeric matrix passed onto pheatmap function diverging_palette logical. Default(TRUE). Sets color scale diverging palette (blue -> white -> red). FALSE, set color continuous color palette viridis::magma(), useful un-scaled expression data. fix_extreme logical. extreme values ends diverging palette fixed colors? Default FALSE. thresh fix_extreme=TRUE value color scale fixed? Since scaling implied use argument, default value set 1.96 (positive negative). removeVar NULL, remove proportion features based variance across rows. Default NULL. Note, removeVar used lowest variance features removed prior scaling input data ... args passed pheatmap() function","code":""},{"path":"/reference/quickmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap with sensible defaults for RNA-seq expression data — quickmap","text":"pheatmap object. See ?pheatmap::pheatmap() details","code":""},{"path":"/reference/quickmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap with sensible defaults for RNA-seq expression data — quickmap","text":"default arguments pheatmap::pheatmap() : scale = \"row\" show_rownames = FALSE border_col = NA cluster_rows = TRUE cluster_cols = TRUE color = colorRampPalette(c(\"dodgerblue3\", \"grey99\", \"firebrick3\"))(30) diverging_palette = TRUE color = rev(viridisLite::magma(n = 30)) diverging_palette = FALSE treeheight_row = 0 clustering_distance_rows = \"correlation\" clustering_distance_cols = \"euclidean\" clustering_method = \"ward.D2\" angle_col = 315 can pass additional arguments simply override defaults well.","code":""},{"path":"/reference/quickmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap with sensible defaults for RNA-seq expression data — quickmap","text":"","code":"# display heatmap of scaled count data and add title to the plot quickmap(GSE161650_lc, main = \"THZ1 vs DMSO\")   # Remove 90% lowest variance features and fix color scale quickmap(   GSE161650_lc,   removeVar = 0.9,   main = \"THZ1 vs DMSO\",   fix_extreme = TRUE,   thresh = 1 ) #> Removing 90% lowest variance features..."},{"path":"/reference/random_rgb_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random RGB color palette — random_rgb_palette","title":"Generate random RGB color palette — random_rgb_palette","text":"function randomly generate N colors rgb colorspace. makes attempt ensuring colors distinct well separated.","code":""},{"path":"/reference/random_rgb_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random RGB color palette — random_rgb_palette","text":"","code":"random_rgb_palette(n, alpha = 1)"},{"path":"/reference/random_rgb_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random RGB color palette — random_rgb_palette","text":"n numeric. Number random colors generate alpha numeric. Transparency level color palette (0-1). Default 1.0","code":""},{"path":"/reference/random_rgb_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random RGB color palette — random_rgb_palette","text":"vector hex values RGB colors length n","code":""},{"path":"/reference/rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate threshold value on ranked input — rank_threshold","title":"Calculate threshold value on ranked input — rank_threshold","text":"Calculate threshold value vector based unimodal threshold method described Rosin 2001 image thresholding. Conceptually, method attempts draw line peak distribution tail calculates maximum distance point line. point distance maximized threshold.","code":""},{"path":"/reference/rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate threshold value on ranked input — rank_threshold","text":"","code":"rank_threshold(x, show = FALSE)"},{"path":"/reference/rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate threshold value on ranked input — rank_threshold","text":"x numeric vector values. show_plot logical. default (FALSE). Show scatter plot given distribution.","code":""},{"path":"/reference/rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate threshold value on ranked input — rank_threshold","text":"named vector containing \"x\" \"y\" position calculated threshold","code":""},{"path":"/reference/rank_threshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate threshold value on ranked input — rank_threshold","text":"function takes numeric vector ranks values using data.table::frank. ties.method = \"first\". returned values threshold \"x\" \"y\", indicate rank data point value rank, respectively.","code":""},{"path":"/reference/rank_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate threshold value on ranked input — rank_threshold","text":"","code":"# simulate exponential counts x <- (1:100)^exp(3) rank_threshold(x, show = TRUE)  #>            x            y  #> 8.500000e+01 5.667807e+38"},{"path":"/reference/rarefy.html","id":null,"dir":"Reference","previous_headings":"","what":"Rarefy (subsample) a matrix — rarefy","title":"Rarefy (subsample) a matrix — rarefy","text":"function randomly subsample counts rows input matrix colSums even depth.","code":""},{"path":"/reference/rarefy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rarefy (subsample) a matrix — rarefy","text":"","code":"rarefy(x, depth)"},{"path":"/reference/rarefy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rarefy (subsample) a matrix — rarefy","text":"x numeric matrix data.frame can converted numeric matrix. Samples columns features rows. depth desired sampling depth applied library.","code":""},{"path":"/reference/rarefy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rarefy (subsample) a matrix — rarefy","text":"","code":"set.seed(123) m <- matrix(   sample.int(100),   nrow = 10,   dimnames = list(     Gene = paste0(\"gene.\", 1:10),     Sample = paste0(\"sample.\", 1:10)   ) )  colSums(m) #>  sample.1  sample.2  sample.3  sample.4  sample.5  sample.6  sample.7  sample.8  #>       499       548       551       545       377       548       521       545  #>  sample.9 sample.10  #>       565       351   rarefied <- rarefy(m, depth = 100) colSums(rarefied) #>  sample.1  sample.2  sample.3  sample.4  sample.5  sample.6  sample.7  sample.8  #>       100       100       100       100       100       100       100       100  #>  sample.9 sample.10  #>       100       100"},{"path":"/reference/read_bismark.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in and Filter Bismark Coverage Files — read_bismark","title":"Read in and Filter Bismark Coverage Files — read_bismark","text":"function read Bismark coverage files optionally filter coverage feature-wise variance.","code":""},{"path":"/reference/read_bismark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in and Filter Bismark Coverage Files — read_bismark","text":"","code":"read_bismark(   files,   coverage = 1,   prop_samples = 1,   remove_zero_var = FALSE,   return_mats = FALSE )"},{"path":"/reference/read_bismark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in and Filter Bismark Coverage Files — read_bismark","text":"files Named vector file paths bismark coverage files coverage Minimum coverage CpG site. Default (1) prop_samples Proportion samples site must covered retained. Default (1) remove_zero_var zero variance features removed filtering coverage? Default (FALSE) return_mats TRUE, return matrices filtered data list. Else, return filtered data.table bismark format. Default (FALSE)","code":""},{"path":"/reference/read_bismark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in and Filter Bismark Coverage Files — read_bismark","text":"Either data.table filtered data additional columns Coverage Variance list matrices filtered data","code":""},{"path":"/reference/read_bismark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in and Filter Bismark Coverage Files — read_bismark","text":"function can optionally return list CpG x Sample matrices filtered data return_mats = TRUE. following matrices returned retained CpG sites: Coverage, Percent Methylation (Percent), count methylated CpGs (Methylated) count unmethylated CpGs (Unmethylated)","code":""},{"path":"/reference/read_bismark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in and Filter Bismark Coverage Files — read_bismark","text":"","code":"if (FALSE) { # \\dontrun{ files <- c(\"P6_1.bismark.cov.gz\", \"P6_4.bismark.cov.gz\", \"P7_2.bismark.cov.gz\", \"P7_5.bismark.cov.gz\", \"P8_3.bismark.cov.gz\", \"P8_6.bismark.cov.gz\") names(files) <- gsub(\"\\\\.bismark\\\\.cov\\\\.gz\", \"\", files)  # Read in all files using default parameters -- returns a data.table result <- read_bismark(files)  # Filter for coverage >= 20 in at least 50% of samples and remove any zero variance features dt <- read_bismark(files, coverage = 20, prop_samples = 0.5, remove_zero_var = TRUE)  # Same filtering as above but return a list of CpG x Sample matrices l <- read_bismark(files, coverage = 20, prop_samples = 0.5, remove_zero_var = TRUE, return_mats = TRUE)  # To view the CpG x Sample Coverages: l$Coverage  # Percent methylation l$Percent } # }"},{"path":"/reference/remove_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove principal components from data — remove_components","title":"Remove principal components from data — remove_components","text":"Reconstruct data removing principal components. function reconstruct truncated version original data matrix removing specified principal components. source code function stolen stack exchange","code":""},{"path":"/reference/remove_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove principal components from data — remove_components","text":"","code":"remove_components(x, components = 1, ...)"},{"path":"/reference/remove_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove principal components from data — remove_components","text":"x data.frame matrix original data. components numeric vector components remove original data. Default (1) ... Additional arguments passed prcomp()","code":""},{"path":"/reference/remove_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove principal components from data — remove_components","text":"data.frame values original units removing components","code":""},{"path":"/reference/remove_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove principal components from data — remove_components","text":"","code":"# Remove first two components from dataset trunc <- remove_components(USArrests, components = 1:2, scale. = TRUE, center = TRUE)  # original data head(USArrests) #>            Murder Assault UrbanPop Rape #> Alabama      13.2     236       58 21.2 #> Alaska       10.0     263       48 44.5 #> Arizona       8.1     294       80 31.0 #> Arkansas      8.8     190       50 19.5 #> California    9.0     276       91 40.6 #> Colorado      7.9     204       78 38.7  # reconstructed data head(trunc) #>              Murder  Assault UrbanPop     Rape #> Alabama    8.879093 171.0042 68.24625 17.99226 #> Alaska     3.558807 152.5293 53.64856 36.33858 #> Arizona    5.370958 220.7384 63.64209 20.95841 #> Arkansas   7.107685 179.4374 64.56869 21.94987 #> California 5.949990 178.4936 61.64172 25.48834 #> Colorado   6.181011 146.4461 59.61149 29.53625"},{"path":"/reference/remove_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove low variance features from a matrix — remove_var","title":"Remove low variance features from a matrix — remove_var","text":"function removes p lowest variance features matrix. function expects features rows samples columns (e.g. expression matrix).","code":""},{"path":"/reference/remove_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove low variance features from a matrix — remove_var","text":"","code":"remove_var(x, ...)  # S3 method for class 'matrix' remove_var(x, p)  # S3 method for class 'data.frame' remove_var(x, p)  # S3 method for class 'SummarizedExperiment' remove_var(x, p, assay = \"counts\")"},{"path":"/reference/remove_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove low variance features from a matrix — remove_var","text":"x matrix, numeric data.frame, SummarizedExperiment object p proportion low variance features remove assay SummarizedExperiment, assay use. Default = \"counts\"","code":""},{"path":"/reference/remove_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove low variance features from a matrix — remove_var","text":"matrix lowest variance features removed","code":""},{"path":"/reference/remove_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove low variance features from a matrix — remove_var","text":"","code":"# Remove 80% lowest variance features removed <- remove_var(GSE161650_lc, p = 0.8) #> Removing 80% lowest variance features..."},{"path":"/reference/sample_n_random_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a null distribution of correlation values — sample_n_random_cor","title":"Generate a null distribution of correlation values — sample_n_random_cor","text":"Selects n random rows numeric matrix replacement. random row, permute vector y perform correlation.","code":""},{"path":"/reference/sample_n_random_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a null distribution of correlation values — sample_n_random_cor","text":"","code":"sample_n_random_cor(X, y, n = 10000, ...)"},{"path":"/reference/sample_n_random_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a null distribution of correlation values — sample_n_random_cor","text":"X numeric matrix data.frame can converted numeric matrix. y numeric vector. Numeric vector values used correlate row df n integer. Number random correlations return. Default (1e4) ... Additional arguments passed `cor` function","code":""},{"path":"/reference/sample_n_random_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a null distribution of correlation values — sample_n_random_cor","text":"numeric vector correlation values. Vector can contain NAs row variance == 0.","code":""},{"path":"/reference/sample_n_random_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a null distribution of correlation values — sample_n_random_cor","text":"","code":"# generate example data X <- matrix(runif(1e3 * 6), nrow = 1e3, ncol = 6) y <- 1:6 dimnames(X) <- list(paste(\"feature\", 1:1e3, sep = \".\"), paste(\"sample\", 1:6, sep = \".\"))  # sample random correlations from permuted data null_dist <- sample_n_random_cor(X, y, n = 1e3, method = \"spearman\")  head(null_dist) #> feature.333 feature.718 feature.797 feature.335 feature.122  feature.71  #> -0.42857143 -0.20000000 -0.42857143 -0.08571429 -0.48571429  0.77142857"},{"path":"/reference/simulate_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate simulated RNA-seq data for testing purposes — simulate_counts","title":"Generate simulated RNA-seq data for testing purposes — simulate_counts","text":"Simulate RNASeq count matrix. Adapted edgeR documentation. function meant serious modelling. really used mostly testing plotting summarizing functions internally. good generating test data.","code":""},{"path":"/reference/simulate_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate simulated RNA-seq data for testing purposes — simulate_counts","text":"","code":"simulate_counts(   n_genes = 1000,   n_up = 50,   n_down = 50,   n_samples = 6,   groups = c(\"ctl\", \"trt\"),   de_group = \"trt\",   mu = 10,   phi = 0.1,   count_offset = 10 )"},{"path":"/reference/simulate_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate simulated RNA-seq data for testing purposes — simulate_counts","text":"n_genes integer. number gene simulate n_up integer. number genes count offset added n_down integer. number genes count offset subtracted . Negative numbers coerced zeros. n_samples integer. number samples simulate groups character vector. Character vector specifying names groups simulate de_group character. name group differentially expressed mu numeric. Mean value counts phi numeric. Dispersion parameter count_offset numeric. Count offset applied /genes.","code":""},{"path":"/reference/simulate_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate simulated RNA-seq data for testing purposes — simulate_counts","text":"list containing count matrix vectors indicating rows modified.","code":""},{"path":"/reference/simulate_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate simulated RNA-seq data for testing purposes — simulate_counts","text":"","code":"# simulate counts using default parameters sim <- simulate_counts()  # extract the count matrix from the simulation result counts <- sim$table  # show rows where counts were modified counts[sim$de_genes, ] #>      ctl.1 ctl.2 ctl.3 trt.1 trt.2 trt.3"},{"path":"/reference/summarize_dge.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize RNA-seq expression results — summarize_dge","title":"Summarize RNA-seq expression results — summarize_dge","text":"Summarize results data.frame. Return data.frame counts //non-DE genes based log-fold-change significance values.","code":""},{"path":"/reference/summarize_dge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize RNA-seq expression results — summarize_dge","text":"","code":"summarize_dge(df, fdr_col = \"FDR\", lfc_col = \"logFC\", fdr = 0.05, lfc = 0)"},{"path":"/reference/summarize_dge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize RNA-seq expression results — summarize_dge","text":"df dataframe results. Must columns containing significance values log-fold changes. fdr_col Column name data.frame containing significance level values. lfc_col Column name data.frame containing log-fold change values. fdr numeric. FDR significance value genes considered significant. lfc numeric. abs(log-fold change) value genes considered significant.","code":""},{"path":"/reference/summarize_dge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize RNA-seq expression results — summarize_dge","text":"data.frame columns describing count percentages //unperturbed genes","code":""},{"path":"/reference/summarize_dge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize RNA-seq expression results — summarize_dge","text":"","code":"summarize_dge(GSE161650_de) #>     Direction    N Percent #> 1          Up 2376   21.60 #> 2        Down 3020   27.45 #> 3 Unperturbed 5606   50.95"},{"path":"/reference/theme_coriell.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 theme for coriell package — theme_coriell","title":"ggplot2 theme for coriell package — theme_coriell","text":"Based ggplot2::theme_light() theme adjust plot title, legend position (bottom), axis titles, axis ticks, strip text.","code":""},{"path":"/reference/theme_coriell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 theme for coriell package — theme_coriell","text":"","code":"theme_coriell()"},{"path":"/reference/theme_coriell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2 theme for coriell package — theme_coriell","text":"","code":"library(ggplot2)  df <- data.frame(   X = 1:100,   Y = rnorm(100),   C = sample(c(\"Group 1\", \"Group 2\", \"Group 3\"), 100, replace = TRUE) )  # Default ggplot2 ggplot(df, aes(X, Y, color = C)) +   geom_point() +   labs(     title = \"ggplot2 default plot\",     subtitle = \"subtitle for default plot\",     x = \"X Label\",     y = \"Y Label\"   ) +    facet_wrap(~C)   # With theme_coriell() ggplot(df, aes(X, Y, color = C)) +   geom_point() +   labs(     title = \"Plot using theme_coriell()\",     subtitle = \"Show facets and plot legend\",          x = \"X Label\",     y = \"Y Label\"   ) +   facet_wrap(~C) +   theme_coriell()"},{"path":"/news/index.html","id":"coriell-0150","dir":"Changelog","previous_headings":"","what":"coriell 0.15.0","title":"coriell 0.15.0","text":"Added argument panther_go() include reference gene list performing representation testing. may still bugs . Updated site. Removed vignettes older workflows. TODO: add new vignettes current best practices RNAseq. Added new arguments plot_volcano() plot_md() allow setting axis limits prior determining annotation placement. functions now also use theme_coriell() default.","code":""},{"path":"/news/index.html","id":"coriell-0140","dir":"Changelog","previous_headings":"","what":"coriell 0.14.0","title":"coriell 0.14.0","text":"Updated meta_de() function operate strictly SummarizedExperiment objects. function significantly faster previous version. Added helper function, dfs2se() convert list data.frames SummarizedExperiment object use meta_de() Added helper function perform jackknife resampling columns SummarizedExperiment, jackknifeSE().","code":""},{"path":"/news/index.html","id":"coriell-0130","dir":"Changelog","previous_headings":"","what":"coriell 0.13.0","title":"coriell 0.13.0","text":"Removed meta-analysis functions, meta_vote(), meta_pcombine() plot_metavolcano(), favor newer meta_de() function provides interface metapod combining p-values robust way. Removed redundant scaling step quickmap() calculating breaks made changes way fix_extreme argument behaves. Updated RNA-seq article analysis steps helper functions Updated panther_go() use httr2","code":""},{"path":"/news/index.html","id":"coriell-0120","dir":"Changelog","previous_headings":"","what":"coriell 0.12.0","title":"coriell 0.12.0","text":"Added UMAP() plot_umap() functions. UMAP() functions accepts PCA objects PCAtools, prcomp, distance matrix raw data matrix exposes umap.defaults function arguments. plot_umap() function provides simple plotting method data.frame produced UMAP() function.","code":""},{"path":"/news/index.html","id":"coriell-0110","dir":"Changelog","previous_headings":"","what":"coriell 0.11.0","title":"coriell 0.11.0","text":"Internal changes quickmap() function. Avoid pheatmap scaling favor vectorized scaling. Speed removeVar calculations Rfast::rowVars() matrixStats::rowVars() available. Speed clustering distance matrix calculations performing distance matrix calculations rdist::rdist() clustering fastcluster::hclust() available. Round values fix_extreme better maintain original scale limits.","code":""},{"path":"/news/index.html","id":"coriell-0100","dir":"Changelog","previous_headings":"","what":"coriell 0.10.0","title":"coriell 0.10.0","text":"Moved packages “Suggests” instead “Imports” reflect package collection helpers. reduces dependencies upon install. Inclusion update plot_boxplot(), plot_density(), plot_parallel(). functions now generics work matrix, data.frame, SummarizedExperiment classes","code":""},{"path":"/news/index.html","id":"coriell-090","dir":"Changelog","previous_headings":"","what":"coriell 0.9.0","title":"coriell 0.9.0","text":"Potential breaking changes plot_volcano() plot_md(). plot_volcano() set default value labels NULL removed removed labels altogether plot_md() Added new plotting functions expression matrices: plot_boxplot(), plot_density(), plot_parallel()","code":""},{"path":"/news/index.html","id":"coriell-080","dir":"Changelog","previous_headings":"","what":"coriell 0.8.0","title":"coriell 0.8.0","text":"Added new ggplot2 theme, theme_coriell() Set defaults plot_volcano() plot_md() consistent colors Added new argument quickmap() removes low variance features plotting.","code":""},{"path":"/news/index.html","id":"coriell-070","dir":"Changelog","previous_headings":"","what":"coriell 0.7.0","title":"coriell 0.7.0","text":"Added function performing pairwise fisher tests relative reference. pairwise_fisher_test() Added arguments quickmap() enable fixing colors extreme ends data. Added lab_size arguments plot_volcano() plot_md() Added rarefy() function. Replaces subsample_counts() Removed old functions.","code":""},{"path":"/news/index.html","id":"coriell-060","dir":"Changelog","previous_headings":"","what":"coriell 0.6.0","title":"coriell 0.6.0","text":"Added new function read_bismark() reads list Bismark coverage files optionally filters coverage variance.","code":""},{"path":"/news/index.html","id":"coriell-050","dir":"Changelog","previous_headings":"","what":"coriell 0.5.0","title":"coriell 0.5.0","text":"Updated plot_md(), plot_volcano(), summarize_dge() remove dplyr() dependency. changes functions breaking. Arguments column names must now quoted. plot_volcano() plot_md() now support additional arguments modifying point size, shape, color. See function documentation.","code":""},{"path":"/news/index.html","id":"coriell-040","dir":"Changelog","previous_headings":"","what":"coriell 0.4.0","title":"coriell 0.4.0","text":"Added function calling outlier values columns numeric matrix IQR method Removed process_quant_file() function. Switched using tximport() pipelines.","code":""},{"path":"/news/index.html","id":"coriell-030","dir":"Changelog","previous_headings":"","what":"coriell 0.3.0","title":"coriell 0.3.0","text":"meta_vote() function implements vote-counting strategy determining common differentially expressed genes meta_pcombine() function combines p-values logFCs across studies. plot_metavolcano() function provides plotting function specific meta_vote() results. Eliminated export magittr pipe. Now coriell doesn’t export pipe.","code":""},{"path":"/news/index.html","id":"coriell-020","dir":"Changelog","previous_headings":"","what":"coriell 0.2.0","title":"coriell 0.2.0","text":"edger_to_df() returns data.frame instead tibble New functions generating random color palettes: distinct_rgb_palette() random_rgb_palette() Added function defining threshold based ranked data: rank_threshold(). Inspired unimodal thresholding algorithm image analysis. panther_go() now returns data.table raw, unlisted data returned request. original version pivoted table wider using columns GO term description GO term. result gave inaccurate results using different pathway function call. General move towards reducing number dependencies functions either removing outside packages switching base R moving data.table(). Added utility functions transforming numeric values.","code":""},{"path":"/news/index.html","id":"coriell-010","dir":"Changelog","previous_headings":"","what":"coriell 0.1.0","title":"coriell 0.1.0","text":"Updated internals permutation_correlation_test() applies permuted vector vectorized fashion entire matrix. Removed filtering capability edger_to_df() allow EdgeR results objects used input.","code":""}]
