% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pileup-profile.R
\name{pileup_profile}
\alias{pileup_profile}
\title{Return the pileup of reads over a set of GRanges}
\usage{
pileup_profile(
  bamfile,
  x,
  scan_bam_flag,
  max_depth = 10000,
  min_base_quality = 13,
  min_mapq = 1,
  min_nucleotide_depth = 0,
  summarize = TRUE
)
}
\arguments{
\item{bamfile}{Path to an indexed BAM file}

\item{x}{GRanges to calculate pileups over}

\item{scan_bam_flag}{An instance of Rsamtools::scanBamFlag() used to to create 
a parameter object influencing what fields and which records are imported 
from a (binary) BAM file}

\item{max_depth}{maximum number of overlapping alignments considered 
for each position in the pileup. See Rsamtools::PileupParam()}

\item{min_base_quality}{minimum ‘QUAL’ value for each nucleotide 
in an alignment. Use phred2ASCIIOffset to help translate numeric or 
character values to these offsets.}

\item{min_mapq}{minimum ‘MAPQ’ value for an alignment to be included 
in pileup.}

\item{min_nucleotide_depth}{minimum count of each nucleotide 
(independent of other nucleotides) at a given position required for said 
nucleotide to appear in the result.}

\item{summarize}{Should the summary stats of the pileups at every relative
position over all ranges be returned? Default TRUE. If FALSE then a data.table
containing all measured ranges and relative positions is returned.}
}
\value{
data.table
}
\description{
This function computes pileups for BAM files over a set of GRanges. It 
returns pileup stats relative to the 5' to 3' direction taking strandedness 
of the input range into account.
}
\details{
For pileup computation, ranges are split by positive and negative strand 
and positions in the final data.table are returned relative to the 5' start
in the input ranges. If unstranded ranges are supplied then they are treated 
as positively stranded ranges.
}
\examples{
\dontrun{

# Select GRanges to compute pileups over
gtf <- rtracklayer::import("/path/to/annotation.gtf")
genes <- gtf[gtf$type == "gene" & gtf$gene_biotype == "protein_coding", ]

# Define parameters for reading in BAM files
flags <- Rsamtools::scanBamFlag(
  isPaired = TRUE,
  isProperPair = TRUE,
  isUnmappedQuery = FALSE,
  hasUnmappedMate = FALSE
  )

# Compute pileups over all gene ranges  
result <- pileup_profile("/path/to/sorted.bam", x = genes, scan_bam_flag = flags)

}

}
