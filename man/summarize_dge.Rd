% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{summarize_dge}
\alias{summarize_dge}
\title{Summarize Results}
\usage{
summarize_dge(df, fdr_col, lfc_col, fdr = 0.05, lfc = 1.5)
}
\arguments{
\item{df}{dataframe of results. Must have columns containing significance values and log-fold changes.}

\item{fdr_col}{dataframe column. Column of dataframe containing the significance level values.}

\item{lfc_col}{dataframe column. Column of dataframe containing the lof-fold change values.}

\item{fdr}{numeric. FDR or significance value below which genes are considered significant.}

\item{lfc}{numeric. abs(log-fold change) value above which genes are considered significant.}
}
\value{
tibble
}
\description{
Summarize a results dataframe. Return dataframe of counts of up/down/non-DE genes based on
log-fold-change and significance values
}
\examples{
\dontrun{
library(edgeR)
library(coriell)

# create some fake data
x <- data.frame(
  ctl1 = rnbinom(1000, size = 0.4, prob = 1e-5),
  ctl2 = rnbinom(1000, size = 0.4, prob = 1e-5),
  trt1 = rnbinom(1000, size = 0.4, prob = 1e-5),
  trt2 = rnbinom(1000, size = 0.4, prob = 1e-5),
  row.names = paste0("gene", 1:1000)
)

# run edger pipeline
group <- factor(c(1, 1, 2, 2))
y <- DGEList(counts = x, group = group)
y <- calcNormFactors(y)
design <- model.matrix(~group)
y <- estimateDisp(y, design)

# To perform quasi-likelihood F-tests:
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)

# convert the results object to a dataframe and summarize
res_df <- edger_to_df(qlf) \%>\%
  summarize_dge(fdr_col = FDR, lfc_col = logFC)
}
}
